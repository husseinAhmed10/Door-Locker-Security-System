
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  000032b4  00003348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080011c  0080011c  00003404  2**0
                  ALLOC
  3 .stab         00002f7c  00000000  00000000  00003404  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001200  00000000  00000000  00006380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000076c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007830  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009479  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b114  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b274  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bccf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 33       	cpi	r26, 0x31	; 49
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 10 	call	0x2118	; 0x2118 <main>
      8a:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e0       	ldi	r26, 0x06	; 6
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e0       	ldi	r24, 0x06	; 6
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_init>:
 ● Description
 ⮚ Function to initialize the Timer driver
 ● Inputs: pointer to the configuration structure with type
 Timer1_ConfigType.
 ● Return: None*/
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer1_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01

	if (Config_Ptr->mode == NORMAL_MODE) {
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	85 81       	ldd	r24, Z+5	; 0x05
     b5a:	88 23       	and	r24, r24
     b5c:	d9 f4       	brne	.+54     	; 0xb94 <Timer1_init+0x4e>
		/*Add the Initial value passed in the configuration structure to the Initial Value Register (TCNT1)*/
		TCNT1 = Config_Ptr->initial_value;
     b5e:	ac e4       	ldi	r26, 0x4C	; 76
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e9 81       	ldd	r30, Y+1	; 0x01
     b64:	fa 81       	ldd	r31, Y+2	; 0x02
     b66:	80 81       	ld	r24, Z
     b68:	91 81       	ldd	r25, Z+1	; 0x01
     b6a:	11 96       	adiw	r26, 0x01	; 1
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24

		/*Enable Overflow Interrupt*/
		TIMSK = TIMSK | (1 << TOIE1);
     b70:	a9 e5       	ldi	r26, 0x59	; 89
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e9 e5       	ldi	r30, 0x59	; 89
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	84 60       	ori	r24, 0x04	; 4
     b7c:	8c 93       	st	X, r24
		 * COM1B0/COM1B1 =	0 	Normal Port operation OC1B disconnected.
		 * FOC1A 		 =	1 	Force Output Compare for Compare unit A (Overflow Mode)
		 * FOC1B 		 =	1 	Force Output Compare for Compare unit B (Overflow Mode)
		 * WGM1/1:0		 =  0	Normal Mode
		 */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
     b7e:	ef e4       	ldi	r30, 0x4F	; 79
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	8c e0       	ldi	r24, 0x0C	; 12
     b84:	80 83       	st	Z, r24
		 * ICNC1		 =  0	Input Capture Noise Canceler
		 * ICES1		 =  0	CES1: Input Capture Edge Select
		 * WGM13:2		 =  0	Normal Mode
		 * CS12:0		 =	Config_Ptr->prescaler (Will be inserted as the pre-scale value passed in configuration structure)
		 */
		TCCR1B = ((Config_Ptr->prescaler) << CS10);
     b86:	ae e4       	ldi	r26, 0x4E	; 78
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e9 81       	ldd	r30, Y+1	; 0x01
     b8c:	fa 81       	ldd	r31, Y+2	; 0x02
     b8e:	84 81       	ldd	r24, Z+4	; 0x04
     b90:	8c 93       	st	X, r24
     b92:	29 c0       	rjmp	.+82     	; 0xbe6 <Timer1_init+0xa0>
	}

	else if (Config_Ptr->mode == COMPARE_MODE) {
     b94:	e9 81       	ldd	r30, Y+1	; 0x01
     b96:	fa 81       	ldd	r31, Y+2	; 0x02
     b98:	85 81       	ldd	r24, Z+5	; 0x05
     b9a:	84 30       	cpi	r24, 0x04	; 4
     b9c:	21 f5       	brne	.+72     	; 0xbe6 <Timer1_init+0xa0>
		/*Add the Initial value passed in the configuration structure to the Initial Value Register (TCNT1)*/
		TCNT1 = Config_Ptr->initial_value;
     b9e:	ac e4       	ldi	r26, 0x4C	; 76
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e9 81       	ldd	r30, Y+1	; 0x01
     ba4:	fa 81       	ldd	r31, Y+2	; 0x02
     ba6:	80 81       	ld	r24, Z
     ba8:	91 81       	ldd	r25, Z+1	; 0x01
     baa:	11 96       	adiw	r26, 0x01	; 1
     bac:	9c 93       	st	X, r25
     bae:	8e 93       	st	-X, r24

		/*Add the Compare value passed in the configuration structure to the Compare Value Register (OCR1A)*/
		OCR1A = Config_Ptr->compare_value;
     bb0:	aa e4       	ldi	r26, 0x4A	; 74
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e9 81       	ldd	r30, Y+1	; 0x01
     bb6:	fa 81       	ldd	r31, Y+2	; 0x02
     bb8:	82 81       	ldd	r24, Z+2	; 0x02
     bba:	93 81       	ldd	r25, Z+3	; 0x03
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	8e 93       	st	-X, r24

		/*Enable Compare Interrupt*/
		TIMSK = TIMSK | (1 << OCIE1A);
     bc2:	a9 e5       	ldi	r26, 0x59	; 89
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e9 e5       	ldi	r30, 0x59	; 89
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	80 61       	ori	r24, 0x10	; 16
     bce:	8c 93       	st	X, r24
		 * COM1B0/COM1B1 =	0 	Normal Port operation OC1B disconnected.
		 * FOC1A 		 =	1 	Force Output Compare for Compare unit A (Compare Mode)
		 * FOC1B 		 =	1 	Force Output Compare for Compare unit B (Compare Mode)
		 * WGM1/1:0		 =  0	Compare Mode
		 */
		TCCR1A = (1 << FOC1A);
     bd0:	ef e4       	ldi	r30, 0x4F	; 79
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	88 e0       	ldi	r24, 0x08	; 8
     bd6:	80 83       	st	Z, r24
		 * ICNC1		 =  0	Input Capture Noise Canceler
		 * ICES1		 =  0	CES1: Input Capture Edge Select
		 * WGM13:2		 =  0:1	Compare Mode
		 * CS12:0		 =	Config_Ptr->prescaler (Will be inserted as the pre-scale value passed in configuration structure)
		 */
		TCCR1B = (1 << WGM12) | ((Config_Ptr->prescaler) << CS10);
     bd8:	ae e4       	ldi	r26, 0x4E	; 78
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e9 81       	ldd	r30, Y+1	; 0x01
     bde:	fa 81       	ldd	r31, Y+2	; 0x02
     be0:	84 81       	ldd	r24, Z+4	; 0x04
     be2:	88 60       	ori	r24, 0x08	; 8
     be4:	8c 93       	st	X, r24
	}

}
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <Timer1_deInit>:
/*b.
 ● Description
 ⮚ Function to disable the Timer1.
 ● Inputs: None
 ● Return: None*/
void Timer1_deInit(void) {
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62

	TCNT1 = 0; /*Timer initial register = 0*/
     bf8:	ec e4       	ldi	r30, 0x4C	; 76
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	11 82       	std	Z+1, r1	; 0x01
     bfe:	10 82       	st	Z, r1
	OCR1A = 0; /*Timer compare register = 0*/
     c00:	ea e4       	ldi	r30, 0x4A	; 74
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	11 82       	std	Z+1, r1	; 0x01
     c06:	10 82       	st	Z, r1
	TIMSK = (TIMSK & ~(0x3C)); /*Disable Timer1 interrupt*/
     c08:	a9 e5       	ldi	r26, 0x59	; 89
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e9 e5       	ldi	r30, 0x59	; 89
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	83 7c       	andi	r24, 0xC3	; 195
     c14:	8c 93       	st	X, r24
	TCCR1A = 0; /*Clear TCCR1A register*/
     c16:	ef e4       	ldi	r30, 0x4F	; 79
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	10 82       	st	Z, r1
	TCCR1B = 0; /*Clear TCCR1B register and stop Timer1*/
     c1c:	ee e4       	ldi	r30, 0x4E	; 78
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	10 82       	st	Z, r1

}
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <Timer1_setCallBack>:
/*c.
 ● Description
 ⮚ Function to set the Call Back function address.
 ● Inputs: pointer to Call Back function.
 ● Return: None*/
void Timer1_setCallBack(void (*a_ptr)(void)) {
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <Timer1_setCallBack+0x6>
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	89 83       	std	Y+1, r24	; 0x01

	g_call_back_function = a_ptr;
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	90 93 1d 01 	sts	0x011D, r25
     c3e:	80 93 1c 01 	sts	0x011C, r24

}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <__vector_9>:

/*Interrupt service routine for both OVF and COMP timers*/

ISR(TIMER1_OVF_vect) {
     c4c:	1f 92       	push	r1
     c4e:	0f 92       	push	r0
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	2f 93       	push	r18
     c58:	3f 93       	push	r19
     c5a:	4f 93       	push	r20
     c5c:	5f 93       	push	r21
     c5e:	6f 93       	push	r22
     c60:	7f 93       	push	r23
     c62:	8f 93       	push	r24
     c64:	9f 93       	push	r25
     c66:	af 93       	push	r26
     c68:	bf 93       	push	r27
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
	if (g_call_back_function != NULL_PTR) {
     c76:	80 91 1c 01 	lds	r24, 0x011C
     c7a:	90 91 1d 01 	lds	r25, 0x011D
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	29 f0       	breq	.+10     	; 0xc8c <__vector_9+0x40>
		(*g_call_back_function)();
     c82:	e0 91 1c 01 	lds	r30, 0x011C
     c86:	f0 91 1d 01 	lds	r31, 0x011D
     c8a:	09 95       	icall
	}
}
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1
     cbc:	2f 93       	push	r18
     cbe:	3f 93       	push	r19
     cc0:	4f 93       	push	r20
     cc2:	5f 93       	push	r21
     cc4:	6f 93       	push	r22
     cc6:	7f 93       	push	r23
     cc8:	8f 93       	push	r24
     cca:	9f 93       	push	r25
     ccc:	af 93       	push	r26
     cce:	bf 93       	push	r27
     cd0:	ef 93       	push	r30
     cd2:	ff 93       	push	r31
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
	if (g_call_back_function != NULL_PTR) {
     cdc:	80 91 1c 01 	lds	r24, 0x011C
     ce0:	90 91 1d 01 	lds	r25, 0x011D
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	29 f0       	breq	.+10     	; 0xcf2 <__vector_7+0x40>
		(*g_call_back_function)();
     ce8:	e0 91 1c 01 	lds	r30, 0x011C
     cec:	f0 91 1d 01 	lds	r31, 0x011D
     cf0:	09 95       	icall
	}

}
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	bf 91       	pop	r27
     cfc:	af 91       	pop	r26
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	7f 91       	pop	r23
     d04:	6f 91       	pop	r22
     d06:	5f 91       	pop	r21
     d08:	4f 91       	pop	r20
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	1f 90       	pop	r1
     d16:	18 95       	reti

00000d18 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <GPIO_setupPinDirection+0x6>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <GPIO_setupPinDirection+0x8>
     d20:	0f 92       	push	r0
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	6a 83       	std	Y+2, r22	; 0x02
     d2a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	88 30       	cpi	r24, 0x08	; 8
     d30:	08 f0       	brcs	.+2      	; 0xd34 <GPIO_setupPinDirection+0x1c>
     d32:	d5 c0       	rjmp	.+426    	; 0xede <GPIO_setupPinDirection+0x1c6>
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	84 30       	cpi	r24, 0x04	; 4
     d38:	08 f0       	brcs	.+2      	; 0xd3c <GPIO_setupPinDirection+0x24>
     d3a:	d1 c0       	rjmp	.+418    	; 0xede <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	3d 83       	std	Y+5, r19	; 0x05
     d44:	2c 83       	std	Y+4, r18	; 0x04
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	9d 81       	ldd	r25, Y+5	; 0x05
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	91 05       	cpc	r25, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <GPIO_setupPinDirection+0x3a>
     d50:	43 c0       	rjmp	.+134    	; 0xdd8 <GPIO_setupPinDirection+0xc0>
     d52:	2c 81       	ldd	r18, Y+4	; 0x04
     d54:	3d 81       	ldd	r19, Y+5	; 0x05
     d56:	22 30       	cpi	r18, 0x02	; 2
     d58:	31 05       	cpc	r19, r1
     d5a:	2c f4       	brge	.+10     	; 0xd66 <GPIO_setupPinDirection+0x4e>
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	9d 81       	ldd	r25, Y+5	; 0x05
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	71 f0       	breq	.+28     	; 0xd80 <GPIO_setupPinDirection+0x68>
     d64:	bc c0       	rjmp	.+376    	; 0xede <GPIO_setupPinDirection+0x1c6>
     d66:	2c 81       	ldd	r18, Y+4	; 0x04
     d68:	3d 81       	ldd	r19, Y+5	; 0x05
     d6a:	22 30       	cpi	r18, 0x02	; 2
     d6c:	31 05       	cpc	r19, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <GPIO_setupPinDirection+0x5a>
     d70:	5f c0       	rjmp	.+190    	; 0xe30 <GPIO_setupPinDirection+0x118>
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	9d 81       	ldd	r25, Y+5	; 0x05
     d76:	83 30       	cpi	r24, 0x03	; 3
     d78:	91 05       	cpc	r25, r1
     d7a:	09 f4       	brne	.+2      	; 0xd7e <GPIO_setupPinDirection+0x66>
     d7c:	85 c0       	rjmp	.+266    	; 0xe88 <GPIO_setupPinDirection+0x170>
     d7e:	af c0       	rjmp	.+350    	; 0xede <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	a1 f4       	brne	.+40     	; 0xdae <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d86:	aa e3       	ldi	r26, 0x3A	; 58
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	ea e3       	ldi	r30, 0x3A	; 58
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <GPIO_setupPinDirection+0x8c>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <GPIO_setupPinDirection+0x88>
     da8:	84 2b       	or	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	98 c0       	rjmp	.+304    	; 0xede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     dae:	aa e3       	ldi	r26, 0x3A	; 58
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ea e3       	ldi	r30, 0x3A	; 58
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <GPIO_setupPinDirection+0xb4>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <GPIO_setupPinDirection+0xb0>
     dd0:	80 95       	com	r24
     dd2:	84 23       	and	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	83 c0       	rjmp	.+262    	; 0xede <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	a1 f4       	brne	.+40     	; 0xe06 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     dde:	a7 e3       	ldi	r26, 0x37	; 55
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e7 e3       	ldi	r30, 0x37	; 55
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <GPIO_setupPinDirection+0xe4>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <GPIO_setupPinDirection+0xe0>
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	6c c0       	rjmp	.+216    	; 0xede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e06:	a7 e3       	ldi	r26, 0x37	; 55
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e7 e3       	ldi	r30, 0x37	; 55
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <GPIO_setupPinDirection+0x10c>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <GPIO_setupPinDirection+0x108>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	57 c0       	rjmp	.+174    	; 0xede <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	a1 f4       	brne	.+40     	; 0xe5e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e36:	a4 e3       	ldi	r26, 0x34	; 52
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e4 e3       	ldi	r30, 0x34	; 52
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <GPIO_setupPinDirection+0x13c>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <GPIO_setupPinDirection+0x138>
     e58:	84 2b       	or	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	40 c0       	rjmp	.+128    	; 0xede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e5e:	a4 e3       	ldi	r26, 0x34	; 52
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e4 e3       	ldi	r30, 0x34	; 52
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <GPIO_setupPinDirection+0x164>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <GPIO_setupPinDirection+0x160>
     e80:	80 95       	com	r24
     e82:	84 23       	and	r24, r20
     e84:	8c 93       	st	X, r24
     e86:	2b c0       	rjmp	.+86     	; 0xede <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	a1 f4       	brne	.+40     	; 0xeb6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e8e:	a1 e3       	ldi	r26, 0x31	; 49
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e1 e3       	ldi	r30, 0x31	; 49
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <GPIO_setupPinDirection+0x194>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <GPIO_setupPinDirection+0x190>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	14 c0       	rjmp	.+40     	; 0xede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     eb6:	a1 e3       	ldi	r26, 0x31	; 49
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e1 e3       	ldi	r30, 0x31	; 49
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <GPIO_setupPinDirection+0x1bc>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <GPIO_setupPinDirection+0x1b8>
     ed8:	80 95       	com	r24
     eda:	84 23       	and	r24, r20
     edc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <GPIO_writePin+0x6>
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <GPIO_writePin+0x8>
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	6a 83       	std	Y+2, r22	; 0x02
     f00:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	88 30       	cpi	r24, 0x08	; 8
     f06:	08 f0       	brcs	.+2      	; 0xf0a <GPIO_writePin+0x1c>
     f08:	d5 c0       	rjmp	.+426    	; 0x10b4 <GPIO_writePin+0x1c6>
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	08 f0       	brcs	.+2      	; 0xf12 <GPIO_writePin+0x24>
     f10:	d1 c0       	rjmp	.+418    	; 0x10b4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3d 83       	std	Y+5, r19	; 0x05
     f1a:	2c 83       	std	Y+4, r18	; 0x04
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	9d 81       	ldd	r25, Y+5	; 0x05
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	91 05       	cpc	r25, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <GPIO_writePin+0x3a>
     f26:	43 c0       	rjmp	.+134    	; 0xfae <GPIO_writePin+0xc0>
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	2c f4       	brge	.+10     	; 0xf3c <GPIO_writePin+0x4e>
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	71 f0       	breq	.+28     	; 0xf56 <GPIO_writePin+0x68>
     f3a:	bc c0       	rjmp	.+376    	; 0x10b4 <GPIO_writePin+0x1c6>
     f3c:	2c 81       	ldd	r18, Y+4	; 0x04
     f3e:	3d 81       	ldd	r19, Y+5	; 0x05
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	09 f4       	brne	.+2      	; 0xf48 <GPIO_writePin+0x5a>
     f46:	5f c0       	rjmp	.+190    	; 0x1006 <GPIO_writePin+0x118>
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	9d 81       	ldd	r25, Y+5	; 0x05
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <GPIO_writePin+0x66>
     f52:	85 c0       	rjmp	.+266    	; 0x105e <GPIO_writePin+0x170>
     f54:	af c0       	rjmp	.+350    	; 0x10b4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	a1 f4       	brne	.+40     	; 0xf84 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f5c:	ab e3       	ldi	r26, 0x3B	; 59
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	eb e3       	ldi	r30, 0x3B	; 59
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <GPIO_writePin+0x8c>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <GPIO_writePin+0x88>
     f7e:	84 2b       	or	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	98 c0       	rjmp	.+304    	; 0x10b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f84:	ab e3       	ldi	r26, 0x3B	; 59
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	eb e3       	ldi	r30, 0x3B	; 59
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <GPIO_writePin+0xb4>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <GPIO_writePin+0xb0>
     fa6:	80 95       	com	r24
     fa8:	84 23       	and	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	83 c0       	rjmp	.+262    	; 0x10b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	a1 f4       	brne	.+40     	; 0xfdc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     fb4:	a8 e3       	ldi	r26, 0x38	; 56
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e8 e3       	ldi	r30, 0x38	; 56
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <GPIO_writePin+0xe4>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <GPIO_writePin+0xe0>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	6c c0       	rjmp	.+216    	; 0x10b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     fdc:	a8 e3       	ldi	r26, 0x38	; 56
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e8 e3       	ldi	r30, 0x38	; 56
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <GPIO_writePin+0x10c>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <GPIO_writePin+0x108>
     ffe:	80 95       	com	r24
    1000:	84 23       	and	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	57 c0       	rjmp	.+174    	; 0x10b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	a1 f4       	brne	.+40     	; 0x1034 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    100c:	a5 e3       	ldi	r26, 0x35	; 53
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <GPIO_writePin+0x13c>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <GPIO_writePin+0x138>
    102e:	84 2b       	or	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	40 c0       	rjmp	.+128    	; 0x10b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1034:	a5 e3       	ldi	r26, 0x35	; 53
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e3       	ldi	r30, 0x35	; 53
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_writePin+0x164>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_writePin+0x160>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	2b c0       	rjmp	.+86     	; 0x10b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	a1 f4       	brne	.+40     	; 0x108c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1064:	a2 e3       	ldi	r26, 0x32	; 50
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e2 e3       	ldi	r30, 0x32	; 50
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <GPIO_writePin+0x194>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <GPIO_writePin+0x190>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    108c:	a2 e3       	ldi	r26, 0x32	; 50
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e2 e3       	ldi	r30, 0x32	; 50
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_writePin+0x1bc>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <GPIO_writePin+0x1b8>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <GPIO_readPin+0x6>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <GPIO_readPin+0x8>
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	8a 83       	std	Y+2, r24	; 0x02
    10d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    10d6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	88 30       	cpi	r24, 0x08	; 8
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <GPIO_readPin+0x1c>
    10de:	84 c0       	rjmp	.+264    	; 0x11e8 <GPIO_readPin+0x124>
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	84 30       	cpi	r24, 0x04	; 4
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <GPIO_readPin+0x24>
    10e6:	80 c0       	rjmp	.+256    	; 0x11e8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	3d 83       	std	Y+5, r19	; 0x05
    10f0:	2c 83       	std	Y+4, r18	; 0x04
    10f2:	4c 81       	ldd	r20, Y+4	; 0x04
    10f4:	5d 81       	ldd	r21, Y+5	; 0x05
    10f6:	41 30       	cpi	r20, 0x01	; 1
    10f8:	51 05       	cpc	r21, r1
    10fa:	79 f1       	breq	.+94     	; 0x115a <GPIO_readPin+0x96>
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	91 05       	cpc	r25, r1
    1104:	34 f4       	brge	.+12     	; 0x1112 <GPIO_readPin+0x4e>
    1106:	2c 81       	ldd	r18, Y+4	; 0x04
    1108:	3d 81       	ldd	r19, Y+5	; 0x05
    110a:	21 15       	cp	r18, r1
    110c:	31 05       	cpc	r19, r1
    110e:	69 f0       	breq	.+26     	; 0x112a <GPIO_readPin+0x66>
    1110:	6b c0       	rjmp	.+214    	; 0x11e8 <GPIO_readPin+0x124>
    1112:	4c 81       	ldd	r20, Y+4	; 0x04
    1114:	5d 81       	ldd	r21, Y+5	; 0x05
    1116:	42 30       	cpi	r20, 0x02	; 2
    1118:	51 05       	cpc	r21, r1
    111a:	b9 f1       	breq	.+110    	; 0x118a <GPIO_readPin+0xc6>
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	91 05       	cpc	r25, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <GPIO_readPin+0x64>
    1126:	49 c0       	rjmp	.+146    	; 0x11ba <GPIO_readPin+0xf6>
    1128:	5f c0       	rjmp	.+190    	; 0x11e8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    112a:	e9 e3       	ldi	r30, 0x39	; 57
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <GPIO_readPin+0x7e>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <GPIO_readPin+0x7a>
    1146:	ca 01       	movw	r24, r20
    1148:	81 70       	andi	r24, 0x01	; 1
    114a:	90 70       	andi	r25, 0x00	; 0
    114c:	88 23       	and	r24, r24
    114e:	19 f0       	breq	.+6      	; 0x1156 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	49 c0       	rjmp	.+146    	; 0x11e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1156:	19 82       	std	Y+1, r1	; 0x01
    1158:	47 c0       	rjmp	.+142    	; 0x11e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    115a:	e6 e3       	ldi	r30, 0x36	; 54
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	a9 01       	movw	r20, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <GPIO_readPin+0xae>
    116e:	55 95       	asr	r21
    1170:	47 95       	ror	r20
    1172:	8a 95       	dec	r24
    1174:	e2 f7       	brpl	.-8      	; 0x116e <GPIO_readPin+0xaa>
    1176:	ca 01       	movw	r24, r20
    1178:	81 70       	andi	r24, 0x01	; 1
    117a:	90 70       	andi	r25, 0x00	; 0
    117c:	88 23       	and	r24, r24
    117e:	19 f0       	breq	.+6      	; 0x1186 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	31 c0       	rjmp	.+98     	; 0x11e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1186:	19 82       	std	Y+1, r1	; 0x01
    1188:	2f c0       	rjmp	.+94     	; 0x11e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    118a:	e3 e3       	ldi	r30, 0x33	; 51
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <GPIO_readPin+0xde>
    119e:	55 95       	asr	r21
    11a0:	47 95       	ror	r20
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <GPIO_readPin+0xda>
    11a6:	ca 01       	movw	r24, r20
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	90 70       	andi	r25, 0x00	; 0
    11ac:	88 23       	and	r24, r24
    11ae:	19 f0       	breq	.+6      	; 0x11b6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	19 c0       	rjmp	.+50     	; 0x11e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11b6:	19 82       	std	Y+1, r1	; 0x01
    11b8:	17 c0       	rjmp	.+46     	; 0x11e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    11ba:	e0 e3       	ldi	r30, 0x30	; 48
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a9 01       	movw	r20, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <GPIO_readPin+0x10e>
    11ce:	55 95       	asr	r21
    11d0:	47 95       	ror	r20
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <GPIO_readPin+0x10a>
    11d6:	ca 01       	movw	r24, r20
    11d8:	81 70       	andi	r24, 0x01	; 1
    11da:	90 70       	andi	r25, 0x00	; 0
    11dc:	88 23       	and	r24, r24
    11de:	19 f0       	breq	.+6      	; 0x11e6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11e6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <GPIO_setupPortDirection+0x6>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <GPIO_setupPortDirection+0x8>
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	84 30       	cpi	r24, 0x04	; 4
    120e:	90 f5       	brcc	.+100    	; 0x1274 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3c 83       	std	Y+4, r19	; 0x04
    1218:	2b 83       	std	Y+3, r18	; 0x03
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	91 05       	cpc	r25, r1
    1222:	d1 f0       	breq	.+52     	; 0x1258 <GPIO_setupPortDirection+0x5e>
    1224:	2b 81       	ldd	r18, Y+3	; 0x03
    1226:	3c 81       	ldd	r19, Y+4	; 0x04
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	2c f4       	brge	.+10     	; 0x1238 <GPIO_setupPortDirection+0x3e>
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	61 f0       	breq	.+24     	; 0x124e <GPIO_setupPortDirection+0x54>
    1236:	1e c0       	rjmp	.+60     	; 0x1274 <GPIO_setupPortDirection+0x7a>
    1238:	2b 81       	ldd	r18, Y+3	; 0x03
    123a:	3c 81       	ldd	r19, Y+4	; 0x04
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	81 f0       	breq	.+32     	; 0x1262 <GPIO_setupPortDirection+0x68>
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	91 05       	cpc	r25, r1
    124a:	81 f0       	breq	.+32     	; 0x126c <GPIO_setupPortDirection+0x72>
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    124e:	ea e3       	ldi	r30, 0x3A	; 58
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	80 83       	st	Z, r24
    1256:	0e c0       	rjmp	.+28     	; 0x1274 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1258:	e7 e3       	ldi	r30, 0x37	; 55
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	80 83       	st	Z, r24
    1260:	09 c0       	rjmp	.+18     	; 0x1274 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1262:	e4 e3       	ldi	r30, 0x34	; 52
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	80 83       	st	Z, r24
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    126c:	e1 e3       	ldi	r30, 0x31	; 49
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	80 83       	st	Z, r24
			break;
		}
	}
}
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <GPIO_writePort+0x6>
    1288:	00 d0       	rcall	.+0      	; 0x128a <GPIO_writePort+0x8>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	84 30       	cpi	r24, 0x04	; 4
    1296:	90 f5       	brcc	.+100    	; 0x12fc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3c 83       	std	Y+4, r19	; 0x04
    12a0:	2b 83       	std	Y+3, r18	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	d1 f0       	breq	.+52     	; 0x12e0 <GPIO_writePort+0x5e>
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	2c f4       	brge	.+10     	; 0x12c0 <GPIO_writePort+0x3e>
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	61 f0       	breq	.+24     	; 0x12d6 <GPIO_writePort+0x54>
    12be:	1e c0       	rjmp	.+60     	; 0x12fc <GPIO_writePort+0x7a>
    12c0:	2b 81       	ldd	r18, Y+3	; 0x03
    12c2:	3c 81       	ldd	r19, Y+4	; 0x04
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	81 f0       	breq	.+32     	; 0x12ea <GPIO_writePort+0x68>
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	91 05       	cpc	r25, r1
    12d2:	81 f0       	breq	.+32     	; 0x12f4 <GPIO_writePort+0x72>
    12d4:	13 c0       	rjmp	.+38     	; 0x12fc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    12d6:	eb e3       	ldi	r30, 0x3B	; 59
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	80 83       	st	Z, r24
    12de:	0e c0       	rjmp	.+28     	; 0x12fc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    12e0:	e8 e3       	ldi	r30, 0x38	; 56
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	80 83       	st	Z, r24
    12e8:	09 c0       	rjmp	.+18     	; 0x12fc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    12ea:	e5 e3       	ldi	r30, 0x35	; 53
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	80 83       	st	Z, r24
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    12f4:	e2 e3       	ldi	r30, 0x32	; 50
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	80 83       	st	Z, r24
			break;
		}
	}
}
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	00 d0       	rcall	.+0      	; 0x1310 <GPIO_readPort+0x6>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <GPIO_readPort+0x8>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1318:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	84 30       	cpi	r24, 0x04	; 4
    131e:	90 f5       	brcc	.+100    	; 0x1384 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	3c 83       	std	Y+4, r19	; 0x04
    1328:	2b 83       	std	Y+3, r18	; 0x03
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	91 05       	cpc	r25, r1
    1332:	d1 f0       	breq	.+52     	; 0x1368 <GPIO_readPort+0x5e>
    1334:	2b 81       	ldd	r18, Y+3	; 0x03
    1336:	3c 81       	ldd	r19, Y+4	; 0x04
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	2c f4       	brge	.+10     	; 0x1348 <GPIO_readPort+0x3e>
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	61 f0       	breq	.+24     	; 0x135e <GPIO_readPort+0x54>
    1346:	1e c0       	rjmp	.+60     	; 0x1384 <GPIO_readPort+0x7a>
    1348:	2b 81       	ldd	r18, Y+3	; 0x03
    134a:	3c 81       	ldd	r19, Y+4	; 0x04
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	81 f0       	breq	.+32     	; 0x1372 <GPIO_readPort+0x68>
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	91 05       	cpc	r25, r1
    135a:	81 f0       	breq	.+32     	; 0x137c <GPIO_readPort+0x72>
    135c:	13 c0       	rjmp	.+38     	; 0x1384 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    135e:	e9 e3       	ldi	r30, 0x39	; 57
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	0e c0       	rjmp	.+28     	; 0x1384 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1368:	e6 e3       	ldi	r30, 0x36	; 54
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	09 c0       	rjmp	.+18     	; 0x1384 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1372:	e3 e3       	ldi	r30, 0x33	; 51
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	04 c0       	rjmp	.+8      	; 0x1384 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    137c:	e0 e3       	ldi	r30, 0x30	; 48
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	60 97       	sbiw	r28, 0x10	; 16
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	62 e0       	ldi	r22, 0x02	; 2
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	63 e0       	ldi	r22, 0x03	; 3
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	64 e0       	ldi	r22, 0x04	; 4
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	65 e0       	ldi	r22, 0x05	; 5
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	66 e0       	ldi	r22, 0x06	; 6
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	67 e0       	ldi	r22, 0x07	; 7
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    13f8:	1f 86       	std	Y+15, r1	; 0x0f
    13fa:	ab c0       	rjmp	.+342    	; 0x1552 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	6f 85       	ldd	r22, Y+15	; 0x0f
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	6f 85       	ldd	r22, Y+15	; 0x0f
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 77 07 	call	0xeee	; 0xeee <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1410:	18 8a       	std	Y+16, r1	; 0x10
    1412:	22 c0       	rjmp	.+68     	; 0x1458 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1414:	88 89       	ldd	r24, Y+16	; 0x10
    1416:	98 2f       	mov	r25, r24
    1418:	9c 5f       	subi	r25, 0xFC	; 252
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	69 2f       	mov	r22, r25
    141e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <GPIO_readPin>
    1422:	88 23       	and	r24, r24
    1424:	b1 f4       	brne	.+44     	; 0x1452 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1426:	8f 85       	ldd	r24, Y+15	; 0x0f
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	98 2f       	mov	r25, r24
    1436:	88 89       	ldd	r24, Y+16	; 0x10
    1438:	89 0f       	add	r24, r25
    143a:	8f 5f       	subi	r24, 0xFF	; 255
    143c:	0e 94 ae 0a 	call	0x155c	; 0x155c <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    1440:	60 96       	adiw	r28, 0x10	; 16
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1452:	88 89       	ldd	r24, Y+16	; 0x10
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	88 8b       	std	Y+16, r24	; 0x10
    1458:	88 89       	ldd	r24, Y+16	; 0x10
    145a:	84 30       	cpi	r24, 0x04	; 4
    145c:	d8 f2       	brcs	.-74     	; 0x1414 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	6f 85       	ldd	r22, Y+15	; 0x0f
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a0 ea       	ldi	r26, 0xA0	; 160
    146e:	b0 e4       	ldi	r27, 0x40	; 64
    1470:	8b 87       	std	Y+11, r24	; 0x0b
    1472:	9c 87       	std	Y+12, r25	; 0x0c
    1474:	ad 87       	std	Y+13, r26	; 0x0d
    1476:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1478:	6b 85       	ldd	r22, Y+11	; 0x0b
    147a:	7c 85       	ldd	r23, Y+12	; 0x0c
    147c:	8d 85       	ldd	r24, Y+13	; 0x0d
    147e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	4a ef       	ldi	r20, 0xFA	; 250
    1486:	54 e4       	ldi	r21, 0x44	; 68
    1488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	8f 83       	std	Y+7, r24	; 0x07
    1492:	98 87       	std	Y+8, r25	; 0x08
    1494:	a9 87       	std	Y+9, r26	; 0x09
    1496:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1498:	6f 81       	ldd	r22, Y+7	; 0x07
    149a:	78 85       	ldd	r23, Y+8	; 0x08
    149c:	89 85       	ldd	r24, Y+9	; 0x09
    149e:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e8       	ldi	r20, 0x80	; 128
    14a6:	5f e3       	ldi	r21, 0x3F	; 63
    14a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ac:	88 23       	and	r24, r24
    14ae:	2c f4       	brge	.+10     	; 0x14ba <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 83       	std	Y+5, r24	; 0x05
    14b8:	3f c0       	rjmp	.+126    	; 0x1538 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    14ba:	6f 81       	ldd	r22, Y+7	; 0x07
    14bc:	78 85       	ldd	r23, Y+8	; 0x08
    14be:	89 85       	ldd	r24, Y+9	; 0x09
    14c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	3f ef       	ldi	r19, 0xFF	; 255
    14c6:	4f e7       	ldi	r20, 0x7F	; 127
    14c8:	57 e4       	ldi	r21, 0x47	; 71
    14ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ce:	18 16       	cp	r1, r24
    14d0:	4c f5       	brge	.+82     	; 0x1524 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e2       	ldi	r20, 0x20	; 32
    14e0:	51 e4       	ldi	r21, 0x41	; 65
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <KEYPAD_getPressedKey+0x186>
    14fc:	88 ec       	ldi	r24, 0xC8	; 200
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <KEYPAD_getPressedKey+0x174>
    150c:	9c 83       	std	Y+4, r25	; 0x04
    150e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	69 f7       	brne	.-38     	; 0x14fc <KEYPAD_getPressedKey+0x168>
    1522:	14 c0       	rjmp	.+40     	; 0x154c <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1524:	6f 81       	ldd	r22, Y+7	; 0x07
    1526:	78 85       	ldd	r23, Y+8	; 0x08
    1528:	89 85       	ldd	r24, Y+9	; 0x09
    152a:	9a 85       	ldd	r25, Y+10	; 0x0a
    152c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <KEYPAD_getPressedKey+0x1b0>
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    154c:	8f 85       	ldd	r24, Y+15	; 0x0f
    154e:	8f 5f       	subi	r24, 0xFF	; 255
    1550:	8f 87       	std	Y+15, r24	; 0x0f
    1552:	8f 85       	ldd	r24, Y+15	; 0x0f
    1554:	84 30       	cpi	r24, 0x04	; 4
    1556:	08 f4       	brcc	.+2      	; 0x155a <KEYPAD_getPressedKey+0x1c6>
    1558:	51 cf       	rjmp	.-350    	; 0x13fc <KEYPAD_getPressedKey+0x68>
    155a:	4e cf       	rjmp	.-356    	; 0x13f8 <KEYPAD_getPressedKey+0x64>

0000155c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    156a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3c 83       	std	Y+4, r19	; 0x04
    1574:	2b 83       	std	Y+3, r18	; 0x03
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	88 30       	cpi	r24, 0x08	; 8
    157c:	91 05       	cpc	r25, r1
    157e:	09 f4       	brne	.+2      	; 0x1582 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1580:	70 c0       	rjmp	.+224    	; 0x1662 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1582:	2b 81       	ldd	r18, Y+3	; 0x03
    1584:	3c 81       	ldd	r19, Y+4	; 0x04
    1586:	29 30       	cpi	r18, 0x09	; 9
    1588:	31 05       	cpc	r19, r1
    158a:	5c f5       	brge	.+86     	; 0x15e2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	84 30       	cpi	r24, 0x04	; 4
    1592:	91 05       	cpc	r25, r1
    1594:	09 f4       	brne	.+2      	; 0x1598 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1596:	59 c0       	rjmp	.+178    	; 0x164a <KEYPAD_4x4_adjustKeyNumber+0xee>
    1598:	2b 81       	ldd	r18, Y+3	; 0x03
    159a:	3c 81       	ldd	r19, Y+4	; 0x04
    159c:	25 30       	cpi	r18, 0x05	; 5
    159e:	31 05       	cpc	r19, r1
    15a0:	9c f4       	brge	.+38     	; 0x15c8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	82 30       	cpi	r24, 0x02	; 2
    15a8:	91 05       	cpc	r25, r1
    15aa:	09 f4       	brne	.+2      	; 0x15ae <KEYPAD_4x4_adjustKeyNumber+0x52>
    15ac:	48 c0       	rjmp	.+144    	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    15ae:	2b 81       	ldd	r18, Y+3	; 0x03
    15b0:	3c 81       	ldd	r19, Y+4	; 0x04
    15b2:	23 30       	cpi	r18, 0x03	; 3
    15b4:	31 05       	cpc	r19, r1
    15b6:	0c f0       	brlt	.+2      	; 0x15ba <KEYPAD_4x4_adjustKeyNumber+0x5e>
    15b8:	45 c0       	rjmp	.+138    	; 0x1644 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    15c4:	39 c0       	rjmp	.+114    	; 0x1638 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    15c6:	67 c0       	rjmp	.+206    	; 0x1696 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    15c8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ca:	3c 81       	ldd	r19, Y+4	; 0x04
    15cc:	26 30       	cpi	r18, 0x06	; 6
    15ce:	31 05       	cpc	r19, r1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <KEYPAD_4x4_adjustKeyNumber+0x78>
    15d2:	41 c0       	rjmp	.+130    	; 0x1656 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	87 30       	cpi	r24, 0x07	; 7
    15da:	91 05       	cpc	r25, r1
    15dc:	0c f0       	brlt	.+2      	; 0x15e0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    15de:	3e c0       	rjmp	.+124    	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x100>
    15e0:	37 c0       	rjmp	.+110    	; 0x1650 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    15e2:	2b 81       	ldd	r18, Y+3	; 0x03
    15e4:	3c 81       	ldd	r19, Y+4	; 0x04
    15e6:	2c 30       	cpi	r18, 0x0C	; 12
    15e8:	31 05       	cpc	r19, r1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <KEYPAD_4x4_adjustKeyNumber+0x92>
    15ec:	46 c0       	rjmp	.+140    	; 0x167a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	8d 30       	cpi	r24, 0x0D	; 13
    15f4:	91 05       	cpc	r25, r1
    15f6:	5c f4       	brge	.+22     	; 0x160e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    15f8:	2b 81       	ldd	r18, Y+3	; 0x03
    15fa:	3c 81       	ldd	r19, Y+4	; 0x04
    15fc:	2a 30       	cpi	r18, 0x0A	; 10
    15fe:	31 05       	cpc	r19, r1
    1600:	b1 f1       	breq	.+108    	; 0x166e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	8b 30       	cpi	r24, 0x0B	; 11
    1608:	91 05       	cpc	r25, r1
    160a:	a4 f5       	brge	.+104    	; 0x1674 <KEYPAD_4x4_adjustKeyNumber+0x118>
    160c:	2d c0       	rjmp	.+90     	; 0x1668 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    160e:	2b 81       	ldd	r18, Y+3	; 0x03
    1610:	3c 81       	ldd	r19, Y+4	; 0x04
    1612:	2e 30       	cpi	r18, 0x0E	; 14
    1614:	31 05       	cpc	r19, r1
    1616:	b9 f1       	breq	.+110    	; 0x1686 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	8e 30       	cpi	r24, 0x0E	; 14
    161e:	91 05       	cpc	r25, r1
    1620:	7c f1       	brlt	.+94     	; 0x1680 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1622:	2b 81       	ldd	r18, Y+3	; 0x03
    1624:	3c 81       	ldd	r19, Y+4	; 0x04
    1626:	2f 30       	cpi	r18, 0x0F	; 15
    1628:	31 05       	cpc	r19, r1
    162a:	79 f1       	breq	.+94     	; 0x168a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	80 31       	cpi	r24, 0x10	; 16
    1632:	91 05       	cpc	r25, r1
    1634:	69 f1       	breq	.+90     	; 0x1690 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1636:	2f c0       	rjmp	.+94     	; 0x1696 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1638:	87 e0       	ldi	r24, 0x07	; 7
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	2e c0       	rjmp	.+92     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    163e:	88 e0       	ldi	r24, 0x08	; 8
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	2b c0       	rjmp	.+86     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1644:	89 e0       	ldi	r24, 0x09	; 9
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	28 c0       	rjmp	.+80     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    164a:	85 e2       	ldi	r24, 0x25	; 37
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	25 c0       	rjmp	.+74     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	22 c0       	rjmp	.+68     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1656:	85 e0       	ldi	r24, 0x05	; 5
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	1f c0       	rjmp	.+62     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    165c:	86 e0       	ldi	r24, 0x06	; 6
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	1c c0       	rjmp	.+56     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1662:	8a e2       	ldi	r24, 0x2A	; 42
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	19 c0       	rjmp	.+50     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	16 c0       	rjmp	.+44     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	13 c0       	rjmp	.+38     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	10 c0       	rjmp	.+32     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    167a:	8d e2       	ldi	r24, 0x2D	; 45
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	0d c0       	rjmp	.+26     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1680:	8d e0       	ldi	r24, 0x0D	; 13
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	0a c0       	rjmp	.+20     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1686:	19 82       	std	Y+1, r1	; 0x01
    1688:	08 c0       	rjmp	.+16     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    168a:	8d e3       	ldi	r24, 0x3D	; 61
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	05 c0       	rjmp	.+10     	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1690:	8b e2       	ldi	r24, 0x2B	; 43
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	02 c0       	rjmp	.+4      	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    169a:	89 81       	ldd	r24, Y+1	; 0x01
}
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void) {
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	2e 97       	sbiw	r28, 0x0e	; 14
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61

	//1- Rs,Enable o/p pins
	GPIO_setupPinDirection(RS_Port, RS_Pin, PIN_OUTPUT);
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	64 e0       	ldi	r22, 0x04	; 4
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Enable_port, Enable_Pin, PIN_OUTPUT);
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	65 e0       	ldi	r22, 0x05	; 5
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	0e 94 8c 06 	call	0xd18	; 0xd18 <GPIO_setupPinDirection>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 ea       	ldi	r26, 0xA0	; 160
    16d8:	b1 e4       	ldi	r27, 0x41	; 65
    16da:	8b 87       	std	Y+11, r24	; 0x0b
    16dc:	9c 87       	std	Y+12, r25	; 0x0c
    16de:	ad 87       	std	Y+13, r26	; 0x0d
    16e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a ef       	ldi	r20, 0xFA	; 250
    16f0:	54 e4       	ldi	r21, 0x44	; 68
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	8f 83       	std	Y+7, r24	; 0x07
    16fc:	98 87       	std	Y+8, r25	; 0x08
    16fe:	a9 87       	std	Y+9, r26	; 0x09
    1700:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	78 85       	ldd	r23, Y+8	; 0x08
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e8       	ldi	r20, 0x80	; 128
    1710:	5f e3       	ldi	r21, 0x3F	; 63
    1712:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1716:	88 23       	and	r24, r24
    1718:	2c f4       	brge	.+10     	; 0x1724 <LCD_init+0x7a>
		__ticks = 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	3f c0       	rjmp	.+126    	; 0x17a2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1724:	6f 81       	ldd	r22, Y+7	; 0x07
    1726:	78 85       	ldd	r23, Y+8	; 0x08
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	9a 85       	ldd	r25, Y+10	; 0x0a
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	4f e7       	ldi	r20, 0x7F	; 127
    1732:	57 e4       	ldi	r21, 0x47	; 71
    1734:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1738:	18 16       	cp	r1, r24
    173a:	4c f5       	brge	.+82     	; 0x178e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173c:	6b 85       	ldd	r22, Y+11	; 0x0b
    173e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1740:	8d 85       	ldd	r24, Y+13	; 0x0d
    1742:	9e 85       	ldd	r25, Y+14	; 0x0e
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e2       	ldi	r20, 0x20	; 32
    174a:	51 e4       	ldi	r21, 0x41	; 65
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	bc 01       	movw	r22, r24
    1756:	cd 01       	movw	r24, r26
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <LCD_init+0xda>
    1766:	88 ec       	ldi	r24, 0xC8	; 200
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	8b 83       	std	Y+3, r24	; 0x03
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCD_init+0xc8>
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	9e 81       	ldd	r25, Y+6	; 0x06
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	69 f7       	brne	.-38     	; 0x1766 <LCD_init+0xbc>
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178e:	6f 81       	ldd	r22, Y+7	; 0x07
    1790:	78 85       	ldd	r23, Y+8	; 0x08
    1792:	89 85       	ldd	r24, Y+9	; 0x09
    1794:	9a 85       	ldd	r25, Y+10	; 0x0a
    1796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	9e 81       	ldd	r25, Y+6	; 0x06
    17a6:	9a 83       	std	Y+2, r25	; 0x02
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_init+0x104>
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	//2- DB o/p port
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	6f ef       	ldi	r22, 0xFF	; 255
    17ba:	0e 94 fd 08 	call	0x11fa	; 0x11fa <GPIO_setupPortDirection>

	/*4- use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    17be:	88 e3       	ldi	r24, 0x38	; 56
    17c0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>

#endif

	//5- Disable cursor
	LCD_sendCommand(LCD_CURSOR_OFF);
    17c4:	8c e0       	ldi	r24, 0x0C	; 12
    17c6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>
	//6- clear screen at beginning
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>

}
    17d0:	2e 96       	adiw	r28, 0x0e	; 14
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */

void LCD_sendCommand(uint8 command) {
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	e9 97       	sbiw	r28, 0x39	; 57
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	89 af       	std	Y+57, r24	; 0x39

	//command register is selected
	GPIO_writePin(RS_Port, RS_Pin, LOGIC_LOW);
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	64 e0       	ldi	r22, 0x04	; 4
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	0e 94 77 07 	call	0xeee	; 0xeee <GPIO_writePin>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e8       	ldi	r26, 0x80	; 128
    1808:	bf e3       	ldi	r27, 0x3F	; 63
    180a:	8d ab       	std	Y+53, r24	; 0x35
    180c:	9e ab       	std	Y+54, r25	; 0x36
    180e:	af ab       	std	Y+55, r26	; 0x37
    1810:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	6d a9       	ldd	r22, Y+53	; 0x35
    1814:	7e a9       	ldd	r23, Y+54	; 0x36
    1816:	8f a9       	ldd	r24, Y+55	; 0x37
    1818:	98 ad       	ldd	r25, Y+56	; 0x38
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a ef       	ldi	r20, 0xFA	; 250
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	89 ab       	std	Y+49, r24	; 0x31
    182c:	9a ab       	std	Y+50, r25	; 0x32
    182e:	ab ab       	std	Y+51, r26	; 0x33
    1830:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1832:	69 a9       	ldd	r22, Y+49	; 0x31
    1834:	7a a9       	ldd	r23, Y+50	; 0x32
    1836:	8b a9       	ldd	r24, Y+51	; 0x33
    1838:	9c a9       	ldd	r25, Y+52	; 0x34
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <LCD_sendCommand+0x72>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	98 ab       	std	Y+48, r25	; 0x30
    1850:	8f a7       	std	Y+47, r24	; 0x2f
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1854:	69 a9       	ldd	r22, Y+49	; 0x31
    1856:	7a a9       	ldd	r23, Y+50	; 0x32
    1858:	8b a9       	ldd	r24, Y+51	; 0x33
    185a:	9c a9       	ldd	r25, Y+52	; 0x34
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	6d a9       	ldd	r22, Y+53	; 0x35
    186e:	7e a9       	ldd	r23, Y+54	; 0x36
    1870:	8f a9       	ldd	r24, Y+55	; 0x37
    1872:	98 ad       	ldd	r25, Y+56	; 0x38
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	98 ab       	std	Y+48, r25	; 0x30
    1892:	8f a7       	std	Y+47, r24	; 0x2f
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <LCD_sendCommand+0xd2>
    1896:	88 ec       	ldi	r24, 0xC8	; 200
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9e a7       	std	Y+46, r25	; 0x2e
    189c:	8d a7       	std	Y+45, r24	; 0x2d
    189e:	8d a5       	ldd	r24, Y+45	; 0x2d
    18a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_sendCommand+0xc0>
    18a6:	9e a7       	std	Y+46, r25	; 0x2e
    18a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ac:	98 a9       	ldd	r25, Y+48	; 0x30
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	98 ab       	std	Y+48, r25	; 0x30
    18b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b6:	98 a9       	ldd	r25, Y+48	; 0x30
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <LCD_sendCommand+0xb4>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	69 a9       	ldd	r22, Y+49	; 0x31
    18c0:	7a a9       	ldd	r23, Y+50	; 0x32
    18c2:	8b a9       	ldd	r24, Y+51	; 0x33
    18c4:	9c a9       	ldd	r25, Y+52	; 0x34
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	98 ab       	std	Y+48, r25	; 0x30
    18d0:	8f a7       	std	Y+47, r24	; 0x2f
    18d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d4:	98 a9       	ldd	r25, Y+48	; 0x30
    18d6:	9c a7       	std	Y+44, r25	; 0x2c
    18d8:	8b a7       	std	Y+43, r24	; 0x2b
    18da:	8b a5       	ldd	r24, Y+43	; 0x2b
    18dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <LCD_sendCommand+0xfc>
    18e2:	9c a7       	std	Y+44, r25	; 0x2c
    18e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);/* delay for processing Tas = 50ns */
	//enable the LCD display
	GPIO_writePin(Enable_port, Enable_Pin, LOGIC_HIGH);
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	65 e0       	ldi	r22, 0x05	; 5
    18ea:	41 e0       	ldi	r20, 0x01	; 1
    18ec:	0e 94 77 07 	call	0xeee	; 0xeee <GPIO_writePin>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e8       	ldi	r26, 0x80	; 128
    18f6:	bf e3       	ldi	r27, 0x3F	; 63
    18f8:	8f a3       	std	Y+39, r24	; 0x27
    18fa:	98 a7       	std	Y+40, r25	; 0x28
    18fc:	a9 a7       	std	Y+41, r26	; 0x29
    18fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	6f a1       	ldd	r22, Y+39	; 0x27
    1902:	78 a5       	ldd	r23, Y+40	; 0x28
    1904:	89 a5       	ldd	r24, Y+41	; 0x29
    1906:	9a a5       	ldd	r25, Y+42	; 0x2a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a ef       	ldi	r20, 0xFA	; 250
    190e:	54 e4       	ldi	r21, 0x44	; 68
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8b a3       	std	Y+35, r24	; 0x23
    191a:	9c a3       	std	Y+36, r25	; 0x24
    191c:	ad a3       	std	Y+37, r26	; 0x25
    191e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1920:	6b a1       	ldd	r22, Y+35	; 0x23
    1922:	7c a1       	ldd	r23, Y+36	; 0x24
    1924:	8d a1       	ldd	r24, Y+37	; 0x25
    1926:	9e a1       	ldd	r25, Y+38	; 0x26
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <LCD_sendCommand+0x160>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9a a3       	std	Y+34, r25	; 0x22
    193e:	89 a3       	std	Y+33, r24	; 0x21
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1942:	6b a1       	ldd	r22, Y+35	; 0x23
    1944:	7c a1       	ldd	r23, Y+36	; 0x24
    1946:	8d a1       	ldd	r24, Y+37	; 0x25
    1948:	9e a1       	ldd	r25, Y+38	; 0x26
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	6f a1       	ldd	r22, Y+39	; 0x27
    195c:	78 a5       	ldd	r23, Y+40	; 0x28
    195e:	89 a5       	ldd	r24, Y+41	; 0x29
    1960:	9a a5       	ldd	r25, Y+42	; 0x2a
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9a a3       	std	Y+34, r25	; 0x22
    1980:	89 a3       	std	Y+33, r24	; 0x21
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <LCD_sendCommand+0x1c0>
    1984:	88 ec       	ldi	r24, 0xC8	; 200
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	98 a3       	std	Y+32, r25	; 0x20
    198a:	8f 8f       	std	Y+31, r24	; 0x1f
    198c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    198e:	98 a1       	ldd	r25, Y+32	; 0x20
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_sendCommand+0x1ae>
    1994:	98 a3       	std	Y+32, r25	; 0x20
    1996:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	89 a1       	ldd	r24, Y+33	; 0x21
    199a:	9a a1       	ldd	r25, Y+34	; 0x22
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9a a3       	std	Y+34, r25	; 0x22
    19a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	89 a1       	ldd	r24, Y+33	; 0x21
    19a4:	9a a1       	ldd	r25, Y+34	; 0x22
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <LCD_sendCommand+0x1a2>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6b a1       	ldd	r22, Y+35	; 0x23
    19ae:	7c a1       	ldd	r23, Y+36	; 0x24
    19b0:	8d a1       	ldd	r24, Y+37	; 0x25
    19b2:	9e a1       	ldd	r25, Y+38	; 0x26
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9a a3       	std	Y+34, r25	; 0x22
    19be:	89 a3       	std	Y+33, r24	; 0x21
    19c0:	89 a1       	ldd	r24, Y+33	; 0x21
    19c2:	9a a1       	ldd	r25, Y+34	; 0x22
    19c4:	9e 8f       	std	Y+30, r25	; 0x1e
    19c6:	8d 8f       	std	Y+29, r24	; 0x1d
    19c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_sendCommand+0x1ea>
    19d0:	9e 8f       	std	Y+30, r25	; 0x1e
    19d2:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(Enable_port,Enable_Pin,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	//send command (write port) to data port D0 -> D7
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    19d4:	82 e0       	ldi	r24, 0x02	; 2
    19d6:	69 ad       	ldd	r22, Y+57	; 0x39
    19d8:	0e 94 41 09 	call	0x1282	; 0x1282 <GPIO_writePort>
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a0 e8       	ldi	r26, 0x80	; 128
    19e2:	bf e3       	ldi	r27, 0x3F	; 63
    19e4:	89 8f       	std	Y+25, r24	; 0x19
    19e6:	9a 8f       	std	Y+26, r25	; 0x1a
    19e8:	ab 8f       	std	Y+27, r26	; 0x1b
    19ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	69 8d       	ldd	r22, Y+25	; 0x19
    19ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a ef       	ldi	r20, 0xFA	; 250
    19fa:	54 e4       	ldi	r21, 0x44	; 68
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	8d 8b       	std	Y+21, r24	; 0x15
    1a06:	9e 8b       	std	Y+22, r25	; 0x16
    1a08:	af 8b       	std	Y+23, r26	; 0x17
    1a0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a10:	8f 89       	ldd	r24, Y+23	; 0x17
    1a12:	98 8d       	ldd	r25, Y+24	; 0x18
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	5f e3       	ldi	r21, 0x3F	; 63
    1a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <LCD_sendCommand+0x24c>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9c 8b       	std	Y+20, r25	; 0x14
    1a2a:	8b 8b       	std	Y+19, r24	; 0x13
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a30:	7e 89       	ldd	r23, Y+22	; 0x16
    1a32:	8f 89       	ldd	r24, Y+23	; 0x17
    1a34:	98 8d       	ldd	r25, Y+24	; 0x18
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a46:	69 8d       	ldd	r22, Y+25	; 0x19
    1a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9c 8b       	std	Y+20, r25	; 0x14
    1a6c:	8b 8b       	std	Y+19, r24	; 0x13
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <LCD_sendCommand+0x2ac>
    1a70:	88 ec       	ldi	r24, 0xC8	; 200
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9a 8b       	std	Y+18, r25	; 0x12
    1a76:	89 8b       	std	Y+17, r24	; 0x11
    1a78:	89 89       	ldd	r24, Y+17	; 0x11
    1a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_sendCommand+0x29a>
    1a80:	9a 8b       	std	Y+18, r25	; 0x12
    1a82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	8b 89       	ldd	r24, Y+19	; 0x13
    1a86:	9c 89       	ldd	r25, Y+20	; 0x14
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	9c 8b       	std	Y+20, r25	; 0x14
    1a8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a90:	9c 89       	ldd	r25, Y+20	; 0x14
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <LCD_sendCommand+0x28e>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9c 8b       	std	Y+20, r25	; 0x14
    1aaa:	8b 8b       	std	Y+19, r24	; 0x13
    1aac:	8b 89       	ldd	r24, Y+19	; 0x13
    1aae:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab0:	98 8b       	std	Y+16, r25	; 0x10
    1ab2:	8f 87       	std	Y+15, r24	; 0x0f
    1ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab6:	98 89       	ldd	r25, Y+16	; 0x10
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <LCD_sendCommand+0x2d6>
    1abc:	98 8b       	std	Y+16, r25	; 0x10
    1abe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(Enable_port,Enable_Pin,LOGIC_LOW); /* Disable LCD E=0 */
    1ac0:	83 e0       	ldi	r24, 0x03	; 3
    1ac2:	65 e0       	ldi	r22, 0x05	; 5
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	0e 94 77 07 	call	0xeee	; 0xeee <GPIO_writePin>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a0 e8       	ldi	r26, 0x80	; 128
    1ad0:	bf e3       	ldi	r27, 0x3F	; 63
    1ad2:	8b 87       	std	Y+11, r24	; 0x0b
    1ad4:	9c 87       	std	Y+12, r25	; 0x0c
    1ad6:	ad 87       	std	Y+13, r26	; 0x0d
    1ad8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    1adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4a ef       	ldi	r20, 0xFA	; 250
    1ae8:	54 e4       	ldi	r21, 0x44	; 68
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	8f 83       	std	Y+7, r24	; 0x07
    1af4:	98 87       	std	Y+8, r25	; 0x08
    1af6:	a9 87       	std	Y+9, r26	; 0x09
    1af8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1afa:	6f 81       	ldd	r22, Y+7	; 0x07
    1afc:	78 85       	ldd	r23, Y+8	; 0x08
    1afe:	89 85       	ldd	r24, Y+9	; 0x09
    1b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e8       	ldi	r20, 0x80	; 128
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0e:	88 23       	and	r24, r24
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <LCD_sendCommand+0x33a>
		__ticks = 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	8d 83       	std	Y+5, r24	; 0x05
    1b1a:	3f c0       	rjmp	.+126    	; 0x1b9a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1e:	78 85       	ldd	r23, Y+8	; 0x08
    1b20:	89 85       	ldd	r24, Y+9	; 0x09
    1b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	4c f5       	brge	.+82     	; 0x1b86 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e2       	ldi	r20, 0x20	; 32
    1b42:	51 e4       	ldi	r21, 0x41	; 65
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <LCD_sendCommand+0x39a>
    1b5e:	88 ec       	ldi	r24, 0xC8	; 200
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	8b 83       	std	Y+3, r24	; 0x03
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <LCD_sendCommand+0x388>
    1b6e:	9c 83       	std	Y+4, r25	; 0x04
    1b70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	9e 81       	ldd	r25, Y+6	; 0x06
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	69 f7       	brne	.-38     	; 0x1b5e <LCD_sendCommand+0x37c>
    1b84:	14 c0       	rjmp	.+40     	; 0x1bae <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b86:	6f 81       	ldd	r22, Y+7	; 0x07
    1b88:	78 85       	ldd	r23, Y+8	; 0x08
    1b8a:	89 85       	ldd	r24, Y+9	; 0x09
    1b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9e:	9a 83       	std	Y+2, r25	; 0x02
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LCD_sendCommand+0x3c4>
    1baa:	9a 83       	std	Y+2, r25	; 0x02
    1bac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif


}
    1bae:	e9 96       	adiw	r28, 0x39	; 57
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */

void LCD_displayCharacter(uint8 data) {
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	e9 97       	sbiw	r28, 0x39	; 57
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	89 af       	std	Y+57, r24	; 0x39

	//data mode register is selected
	GPIO_writePin(RS_Port, RS_Pin, LOGIC_HIGH);
    1bd6:	83 e0       	ldi	r24, 0x03	; 3
    1bd8:	64 e0       	ldi	r22, 0x04	; 4
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	0e 94 77 07 	call	0xeee	; 0xeee <GPIO_writePin>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e8       	ldi	r26, 0x80	; 128
    1be6:	bf e3       	ldi	r27, 0x3F	; 63
    1be8:	8d ab       	std	Y+53, r24	; 0x35
    1bea:	9e ab       	std	Y+54, r25	; 0x36
    1bec:	af ab       	std	Y+55, r26	; 0x37
    1bee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	6d a9       	ldd	r22, Y+53	; 0x35
    1bf2:	7e a9       	ldd	r23, Y+54	; 0x36
    1bf4:	8f a9       	ldd	r24, Y+55	; 0x37
    1bf6:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a ef       	ldi	r20, 0xFA	; 250
    1bfe:	54 e4       	ldi	r21, 0x44	; 68
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	89 ab       	std	Y+49, r24	; 0x31
    1c0a:	9a ab       	std	Y+50, r25	; 0x32
    1c0c:	ab ab       	std	Y+51, r26	; 0x33
    1c0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c10:	69 a9       	ldd	r22, Y+49	; 0x31
    1c12:	7a a9       	ldd	r23, Y+50	; 0x32
    1c14:	8b a9       	ldd	r24, Y+51	; 0x33
    1c16:	9c a9       	ldd	r25, Y+52	; 0x34
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	98 ab       	std	Y+48, r25	; 0x30
    1c2e:	8f a7       	std	Y+47, r24	; 0x2f
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c32:	69 a9       	ldd	r22, Y+49	; 0x31
    1c34:	7a a9       	ldd	r23, Y+50	; 0x32
    1c36:	8b a9       	ldd	r24, Y+51	; 0x33
    1c38:	9c a9       	ldd	r25, Y+52	; 0x34
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c4c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c4e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c50:	98 ad       	ldd	r25, Y+56	; 0x38
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	98 ab       	std	Y+48, r25	; 0x30
    1c70:	8f a7       	std	Y+47, r24	; 0x2f
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <LCD_displayCharacter+0xd2>
    1c74:	88 ec       	ldi	r24, 0xC8	; 200
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9e a7       	std	Y+46, r25	; 0x2e
    1c7a:	8d a7       	std	Y+45, r24	; 0x2d
    1c7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_displayCharacter+0xc0>
    1c84:	9e a7       	std	Y+46, r25	; 0x2e
    1c86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	98 ab       	std	Y+48, r25	; 0x30
    1c90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c94:	98 a9       	ldd	r25, Y+48	; 0x30
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <LCD_displayCharacter+0xb4>
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	98 ab       	std	Y+48, r25	; 0x30
    1cae:	8f a7       	std	Y+47, r24	; 0x2f
    1cb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb4:	9c a7       	std	Y+44, r25	; 0x2c
    1cb6:	8b a7       	std	Y+43, r24	; 0x2b
    1cb8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cba:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_displayCharacter+0xfc>
    1cc0:	9c a7       	std	Y+44, r25	; 0x2c
    1cc2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	//enable the LCD display
	GPIO_writePin(Enable_port, Enable_Pin, LOGIC_HIGH);
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	65 e0       	ldi	r22, 0x05	; 5
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 77 07 	call	0xeee	; 0xeee <GPIO_writePin>
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a0 e8       	ldi	r26, 0x80	; 128
    1cd4:	bf e3       	ldi	r27, 0x3F	; 63
    1cd6:	8f a3       	std	Y+39, r24	; 0x27
    1cd8:	98 a7       	std	Y+40, r25	; 0x28
    1cda:	a9 a7       	std	Y+41, r26	; 0x29
    1cdc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ce2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ce4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	4a ef       	ldi	r20, 0xFA	; 250
    1cec:	54 e4       	ldi	r21, 0x44	; 68
    1cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	8b a3       	std	Y+35, r24	; 0x23
    1cf8:	9c a3       	std	Y+36, r25	; 0x24
    1cfa:	ad a3       	std	Y+37, r26	; 0x25
    1cfc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1d00:	7c a1       	ldd	r23, Y+36	; 0x24
    1d02:	8d a1       	ldd	r24, Y+37	; 0x25
    1d04:	9e a1       	ldd	r25, Y+38	; 0x26
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e8       	ldi	r20, 0x80	; 128
    1d0c:	5f e3       	ldi	r21, 0x3F	; 63
    1d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d12:	88 23       	and	r24, r24
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9a a3       	std	Y+34, r25	; 0x22
    1d1c:	89 a3       	std	Y+33, r24	; 0x21
    1d1e:	3f c0       	rjmp	.+126    	; 0x1d9e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1d20:	6b a1       	ldd	r22, Y+35	; 0x23
    1d22:	7c a1       	ldd	r23, Y+36	; 0x24
    1d24:	8d a1       	ldd	r24, Y+37	; 0x25
    1d26:	9e a1       	ldd	r25, Y+38	; 0x26
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	3f ef       	ldi	r19, 0xFF	; 255
    1d2c:	4f e7       	ldi	r20, 0x7F	; 127
    1d2e:	57 e4       	ldi	r21, 0x47	; 71
    1d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	4c f5       	brge	.+82     	; 0x1d8a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d38:	6f a1       	ldd	r22, Y+39	; 0x27
    1d3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e2       	ldi	r20, 0x20	; 32
    1d46:	51 e4       	ldi	r21, 0x41	; 65
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9a a3       	std	Y+34, r25	; 0x22
    1d5e:	89 a3       	std	Y+33, r24	; 0x21
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <LCD_displayCharacter+0x1c0>
    1d62:	88 ec       	ldi	r24, 0xC8	; 200
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	98 a3       	std	Y+32, r25	; 0x20
    1d68:	8f 8f       	std	Y+31, r24	; 0x1f
    1d6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_displayCharacter+0x1ae>
    1d72:	98 a3       	std	Y+32, r25	; 0x20
    1d74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d76:	89 a1       	ldd	r24, Y+33	; 0x21
    1d78:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	9a a3       	std	Y+34, r25	; 0x22
    1d7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d80:	89 a1       	ldd	r24, Y+33	; 0x21
    1d82:	9a a1       	ldd	r25, Y+34	; 0x22
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	69 f7       	brne	.-38     	; 0x1d62 <LCD_displayCharacter+0x1a2>
    1d88:	14 c0       	rjmp	.+40     	; 0x1db2 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d90:	9e a1       	ldd	r25, Y+38	; 0x26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9a a3       	std	Y+34, r25	; 0x22
    1d9c:	89 a3       	std	Y+33, r24	; 0x21
    1d9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1da0:	9a a1       	ldd	r25, Y+34	; 0x22
    1da2:	9e 8f       	std	Y+30, r25	; 0x1e
    1da4:	8d 8f       	std	Y+29, r24	; 0x1d
    1da6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1da8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <LCD_displayCharacter+0x1ea>
    1dae:	9e 8f       	std	Y+30, r25	; 0x1e
    1db0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(Enable_port,Enable_Pin,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1db2:	82 e0       	ldi	r24, 0x02	; 2
    1db4:	69 ad       	ldd	r22, Y+57	; 0x39
    1db6:	0e 94 41 09 	call	0x1282	; 0x1282 <GPIO_writePort>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a0 e8       	ldi	r26, 0x80	; 128
    1dc0:	bf e3       	ldi	r27, 0x3F	; 63
    1dc2:	89 8f       	std	Y+25, r24	; 0x19
    1dc4:	9a 8f       	std	Y+26, r25	; 0x1a
    1dc6:	ab 8f       	std	Y+27, r26	; 0x1b
    1dc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dca:	69 8d       	ldd	r22, Y+25	; 0x19
    1dcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a ef       	ldi	r20, 0xFA	; 250
    1dd8:	54 e4       	ldi	r21, 0x44	; 68
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	8d 8b       	std	Y+21, r24	; 0x15
    1de4:	9e 8b       	std	Y+22, r25	; 0x16
    1de6:	af 8b       	std	Y+23, r26	; 0x17
    1de8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dea:	6d 89       	ldd	r22, Y+21	; 0x15
    1dec:	7e 89       	ldd	r23, Y+22	; 0x16
    1dee:	8f 89       	ldd	r24, Y+23	; 0x17
    1df0:	98 8d       	ldd	r25, Y+24	; 0x18
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9c 8b       	std	Y+20, r25	; 0x14
    1e08:	8b 8b       	std	Y+19, r24	; 0x13
    1e0a:	3f c0       	rjmp	.+126    	; 0x1e8a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1e0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e10:	8f 89       	ldd	r24, Y+23	; 0x17
    1e12:	98 8d       	ldd	r25, Y+24	; 0x18
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	4f e7       	ldi	r20, 0x7F	; 127
    1e1a:	57 e4       	ldi	r21, 0x47	; 71
    1e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	4c f5       	brge	.+82     	; 0x1e76 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e24:	69 8d       	ldd	r22, Y+25	; 0x19
    1e26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e2       	ldi	r20, 0x20	; 32
    1e32:	51 e4       	ldi	r21, 0x41	; 65
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9c 8b       	std	Y+20, r25	; 0x14
    1e4a:	8b 8b       	std	Y+19, r24	; 0x13
    1e4c:	0f c0       	rjmp	.+30     	; 0x1e6c <LCD_displayCharacter+0x2ac>
    1e4e:	88 ec       	ldi	r24, 0xC8	; 200
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9a 8b       	std	Y+18, r25	; 0x12
    1e54:	89 8b       	std	Y+17, r24	; 0x11
    1e56:	89 89       	ldd	r24, Y+17	; 0x11
    1e58:	9a 89       	ldd	r25, Y+18	; 0x12
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_displayCharacter+0x29a>
    1e5e:	9a 8b       	std	Y+18, r25	; 0x12
    1e60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	8b 89       	ldd	r24, Y+19	; 0x13
    1e64:	9c 89       	ldd	r25, Y+20	; 0x14
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	9c 8b       	std	Y+20, r25	; 0x14
    1e6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <LCD_displayCharacter+0x28e>
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	6d 89       	ldd	r22, Y+21	; 0x15
    1e78:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9c 8b       	std	Y+20, r25	; 0x14
    1e88:	8b 8b       	std	Y+19, r24	; 0x13
    1e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8e:	98 8b       	std	Y+16, r25	; 0x10
    1e90:	8f 87       	std	Y+15, r24	; 0x0f
    1e92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e94:	98 89       	ldd	r25, Y+16	; 0x10
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_displayCharacter+0x2d6>
    1e9a:	98 8b       	std	Y+16, r25	; 0x10
    1e9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(Enable_port,Enable_Pin,LOGIC_LOW); /* Disable LCD E=0 */
    1e9e:	83 e0       	ldi	r24, 0x03	; 3
    1ea0:	65 e0       	ldi	r22, 0x05	; 5
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 77 07 	call	0xeee	; 0xeee <GPIO_writePin>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a0 e8       	ldi	r26, 0x80	; 128
    1eae:	bf e3       	ldi	r27, 0x3F	; 63
    1eb0:	8b 87       	std	Y+11, r24	; 0x0b
    1eb2:	9c 87       	std	Y+12, r25	; 0x0c
    1eb4:	ad 87       	std	Y+13, r26	; 0x0d
    1eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a ef       	ldi	r20, 0xFA	; 250
    1ec6:	54 e4       	ldi	r21, 0x44	; 68
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8f 83       	std	Y+7, r24	; 0x07
    1ed2:	98 87       	std	Y+8, r25	; 0x08
    1ed4:	a9 87       	std	Y+9, r26	; 0x09
    1ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eda:	78 85       	ldd	r23, Y+8	; 0x08
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1efa:	6f 81       	ldd	r22, Y+7	; 0x07
    1efc:	78 85       	ldd	r23, Y+8	; 0x08
    1efe:	89 85       	ldd	r24, Y+9	; 0x09
    1f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <LCD_displayCharacter+0x39a>
    1f3c:	88 ec       	ldi	r24, 0xC8	; 200
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	8b 83       	std	Y+3, r24	; 0x03
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <LCD_displayCharacter+0x388>
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9e 83       	std	Y+6, r25	; 0x06
    1f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <LCD_displayCharacter+0x37c>
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	6f 81       	ldd	r22, Y+7	; 0x07
    1f66:	78 85       	ldd	r23, Y+8	; 0x08
    1f68:	89 85       	ldd	r24, Y+9	; 0x09
    1f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <LCD_displayCharacter+0x3c4>
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif


}
    1f8c:	e9 96       	adiw	r28, 0x39	; 57
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */

void LCD_displayString(uint8 *data) {
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <LCD_displayString+0x6>
    1fa4:	0f 92       	push	r0
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	9b 83       	std	Y+3, r25	; 0x03
    1fac:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    1fae:	19 82       	std	Y+1, r1	; 0x01
    1fb0:	0e c0       	rjmp	.+28     	; 0x1fce <LCD_displayString+0x30>
	while (data[i] != '\0') {
		LCD_displayCharacter(data[i]);
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	e2 0f       	add	r30, r18
    1fc0:	f3 1f       	adc	r31, r19
    1fc2:	80 81       	ld	r24, Z
    1fc4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <LCD_displayCharacter>
		i++;
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	89 83       	std	Y+1, r24	; 0x01
 */

void LCD_displayString(uint8 *data) {

	uint8 i = 0;
	while (data[i] != '\0') {
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	fc 01       	movw	r30, r24
    1fda:	e2 0f       	add	r30, r18
    1fdc:	f3 1f       	adc	r31, r19
    1fde:	80 81       	ld	r24, Z
    1fe0:	88 23       	and	r24, r24
    1fe2:	39 f7       	brne	.-50     	; 0x1fb2 <LCD_displayString+0x14>
		LCD_displayCharacter(data[i]);
		i++;
	}

}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */

void LCD_moveCursor(uint8 row, uint8 col) {
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <LCD_moveCursor+0x6>
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <LCD_moveCursor+0x8>
    1ff8:	0f 92       	push	r0
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
    2000:	6b 83       	std	Y+3, r22	; 0x03

	uint8 lcd_memory_address;

		/* Calculate the required address in the LCD DDRAM */
		switch(row)
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	3d 83       	std	Y+5, r19	; 0x05
    200a:	2c 83       	std	Y+4, r18	; 0x04
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	91 05       	cpc	r25, r1
    2014:	c1 f0       	breq	.+48     	; 0x2046 <LCD_moveCursor+0x56>
    2016:	2c 81       	ldd	r18, Y+4	; 0x04
    2018:	3d 81       	ldd	r19, Y+5	; 0x05
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	2c f4       	brge	.+10     	; 0x202a <LCD_moveCursor+0x3a>
    2020:	8c 81       	ldd	r24, Y+4	; 0x04
    2022:	9d 81       	ldd	r25, Y+5	; 0x05
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	61 f0       	breq	.+24     	; 0x2040 <LCD_moveCursor+0x50>
    2028:	19 c0       	rjmp	.+50     	; 0x205c <LCD_moveCursor+0x6c>
    202a:	2c 81       	ldd	r18, Y+4	; 0x04
    202c:	3d 81       	ldd	r19, Y+5	; 0x05
    202e:	22 30       	cpi	r18, 0x02	; 2
    2030:	31 05       	cpc	r19, r1
    2032:	69 f0       	breq	.+26     	; 0x204e <LCD_moveCursor+0x5e>
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	9d 81       	ldd	r25, Y+5	; 0x05
    2038:	83 30       	cpi	r24, 0x03	; 3
    203a:	91 05       	cpc	r25, r1
    203c:	61 f0       	breq	.+24     	; 0x2056 <LCD_moveCursor+0x66>
    203e:	0e c0       	rjmp	.+28     	; 0x205c <LCD_moveCursor+0x6c>
		{
			case 0:
				lcd_memory_address=col;
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	0b c0       	rjmp	.+22     	; 0x205c <LCD_moveCursor+0x6c>
					break;
			case 1:
				lcd_memory_address=col+0x40;
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	80 5c       	subi	r24, 0xC0	; 192
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	07 c0       	rjmp	.+14     	; 0x205c <LCD_moveCursor+0x6c>
					break;
			case 2:
				lcd_memory_address=col+0x10;
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	80 5f       	subi	r24, 0xF0	; 240
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	03 c0       	rjmp	.+6      	; 0x205c <LCD_moveCursor+0x6c>
					break;
			case 3:
				lcd_memory_address=col+0x50;
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	80 5b       	subi	r24, 0xB0	; 176
    205a:	89 83       	std	Y+1, r24	; 0x01
					break;
		}
		/* Move the LCD cursor to this specific address */
		LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	80 68       	ori	r24, 0x80	; 128
    2060:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>

}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	00 d0       	rcall	.+0      	; 0x207a <LCD_displayStringRowColumn+0x6>
    207a:	00 d0       	rcall	.+0      	; 0x207c <LCD_displayStringRowColumn+0x8>
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	6a 83       	std	Y+2, r22	; 0x02
    2084:	5c 83       	std	Y+4, r21	; 0x04
    2086:	4b 83       	std	Y+3, r20	; 0x03

	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	6a 81       	ldd	r22, Y+2	; 0x02
    208c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>

}
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */

void LCD_intgerToString(int data) {
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	62 97       	sbiw	r28, 0x12	; 18
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	9a 8b       	std	Y+18, r25	; 0x12
    20bc:	89 8b       	std	Y+17, r24	; 0x11

	char buff[16]; /* String to hold the ascii result */
	itoa(data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    20be:	89 89       	ldd	r24, Y+17	; 0x11
    20c0:	9a 89       	ldd	r25, Y+18	; 0x12
    20c2:	9e 01       	movw	r18, r28
    20c4:	2f 5f       	subi	r18, 0xFF	; 255
    20c6:	3f 4f       	sbci	r19, 0xFF	; 255
    20c8:	b9 01       	movw	r22, r18
    20ca:	4a e0       	ldi	r20, 0x0A	; 10
    20cc:	50 e0       	ldi	r21, 0x00	; 0
    20ce:	0e 94 13 19 	call	0x3226	; 0x3226 <itoa>
	LCD_displayString(buff); /* Display the string */
    20d2:	ce 01       	movw	r24, r28
    20d4:	01 96       	adiw	r24, 0x01	; 1
    20d6:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>

}
    20da:	62 96       	adiw	r28, 0x12	; 18
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */

void LCD_clearScreen(void) {
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62

	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>

}
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <Timer_CallBackFunction>:
/*Compared value calculation: compared value = (8MHz/1024 prescalar) = 7812.5 ~ 7813*/

Timer1_ConfigType g_timer1_config =
		{ 0, 7813, CLK_PRESCALER_1024, COMPARE_MODE };
uint8 g_ticks;
void Timer_CallBackFunction(void) {
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    2108:	80 91 30 01 	lds	r24, 0x0130
    210c:	8f 5f       	subi	r24, 0xFF	; 255
    210e:	80 93 30 01 	sts	0x0130, r24
}
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <main>:
uint8 Enter_pass(void);
void Door();

/*Main Function*/

int main(void) {
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	6d 97       	sbiw	r28, 0x1d	; 29
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1 << 7);
    212c:	af e5       	ldi	r26, 0x5F	; 95
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	ef e5       	ldi	r30, 0x5F	; 95
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	80 68       	ori	r24, 0x80	; 128
    2138:	8c 93       	st	X, r24
	UART_configType configPtr = { 9600, NO_Parity, One_Stop_Bit, Data_8_Bits };
    213a:	ce 01       	movw	r24, r28
    213c:	42 96       	adiw	r24, 0x12	; 18
    213e:	9a 8f       	std	Y+26, r25	; 0x1a
    2140:	89 8f       	std	Y+25, r24	; 0x19
    2142:	e5 e1       	ldi	r30, 0x15	; 21
    2144:	f1 e0       	ldi	r31, 0x01	; 1
    2146:	fc 8f       	std	Y+28, r31	; 0x1c
    2148:	eb 8f       	std	Y+27, r30	; 0x1b
    214a:	f7 e0       	ldi	r31, 0x07	; 7
    214c:	fd 8f       	std	Y+29, r31	; 0x1d
    214e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2150:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2152:	00 80       	ld	r0, Z
    2154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	9c 8f       	std	Y+28, r25	; 0x1c
    215c:	8b 8f       	std	Y+27, r24	; 0x1b
    215e:	e9 8d       	ldd	r30, Y+25	; 0x19
    2160:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2162:	00 82       	st	Z, r0
    2164:	89 8d       	ldd	r24, Y+25	; 0x19
    2166:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	9a 8f       	std	Y+26, r25	; 0x1a
    216c:	89 8f       	std	Y+25, r24	; 0x19
    216e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2170:	91 50       	subi	r25, 0x01	; 1
    2172:	9d 8f       	std	Y+29, r25	; 0x1d
    2174:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2176:	ee 23       	and	r30, r30
    2178:	51 f7       	brne	.-44     	; 0x214e <main+0x36>
	UART_init(&configPtr);
    217a:	ce 01       	movw	r24, r28
    217c:	42 96       	adiw	r24, 0x12	; 18
    217e:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_init>

	LCD_init();
    2182:	0e 94 55 0b 	call	0x16aa	; 0x16aa <LCD_init>
	uint8 receivebyte;

	/*Do not go to main menu until password creation at the beginning*/

	do {
		createPassword();
    2186:	0e 94 8d 11 	call	0x231a	; 0x231a <createPassword>
		status = sendpassword();
    218a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <sendpassword>
    218e:	89 8b       	std	Y+17, r24	; 0x11
	} while (status == 0);
    2190:	89 89       	ldd	r24, Y+17	; 0x11
    2192:	88 23       	and	r24, r24
    2194:	c1 f3       	breq	.-16     	; 0x2186 <main+0x6e>

	while (1) {

		LCD_clearScreen();
    2196:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
		LCD_moveCursor(0, 0);
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	60 e0       	ldi	r22, 0x00	; 0
    219e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_moveCursor>
		LCD_displayString("+ : Open Door");
    21a2:	80 e6       	ldi	r24, 0x60	; 96
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>

		LCD_moveCursor(1, 0);
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
    21b2:	8e e6       	ldi	r24, 0x6E	; 110
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
    21ba:	76 c0       	rjmp	.+236    	; 0x22a8 <main+0x190>

		while (keypad_reading != '+' && keypad_reading != '-') {

			keypad_reading = KEYPAD_getPressedKey();
    21bc:	0e 94 ca 09 	call	0x1394	; 0x1394 <KEYPAD_getPressedKey>
    21c0:	80 93 14 01 	sts	0x0114, r24
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	aa ef       	ldi	r26, 0xFA	; 250
    21ca:	b3 e4       	ldi	r27, 0x43	; 67
    21cc:	8b 87       	std	Y+11, r24	; 0x0b
    21ce:	9c 87       	std	Y+12, r25	; 0x0c
    21d0:	ad 87       	std	Y+13, r26	; 0x0d
    21d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21da:	9e 85       	ldd	r25, Y+14	; 0x0e
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	4a ef       	ldi	r20, 0xFA	; 250
    21e2:	54 e4       	ldi	r21, 0x44	; 68
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8f 83       	std	Y+7, r24	; 0x07
    21ee:	98 87       	std	Y+8, r25	; 0x08
    21f0:	a9 87       	std	Y+9, r26	; 0x09
    21f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e8       	ldi	r20, 0x80	; 128
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2208:	88 23       	and	r24, r24
    220a:	2c f4       	brge	.+10     	; 0x2216 <main+0xfe>
		__ticks = 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <main+0x17c>
	else if (__tmp > 65535)
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	3f ef       	ldi	r19, 0xFF	; 255
    2222:	4f e7       	ldi	r20, 0x7F	; 127
    2224:	57 e4       	ldi	r21, 0x47	; 71
    2226:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    222a:	18 16       	cp	r1, r24
    222c:	4c f5       	brge	.+82     	; 0x2280 <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2230:	7c 85       	ldd	r23, Y+12	; 0x0c
    2232:	8d 85       	ldd	r24, Y+13	; 0x0d
    2234:	9e 85       	ldd	r25, Y+14	; 0x0e
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <main+0x15e>
    2258:	88 ec       	ldi	r24, 0xC8	; 200
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9c 83       	std	Y+4, r25	; 0x04
    225e:	8b 83       	std	Y+3, r24	; 0x03
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	9c 81       	ldd	r25, Y+4	; 0x04
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <main+0x14c>
    2268:	9c 83       	std	Y+4, r25	; 0x04
    226a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	9e 81       	ldd	r25, Y+6	; 0x06
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	69 f7       	brne	.-38     	; 0x2258 <main+0x140>
    227e:	14 c0       	rjmp	.+40     	; 0x22a8 <main+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2280:	6f 81       	ldd	r22, Y+7	; 0x07
    2282:	78 85       	ldd	r23, Y+8	; 0x08
    2284:	89 85       	ldd	r24, Y+9	; 0x09
    2286:	9a 85       	ldd	r25, Y+10	; 0x0a
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	9a 83       	std	Y+2, r25	; 0x02
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	9a 81       	ldd	r25, Y+2	; 0x02
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <main+0x188>
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayString("+ : Open Door");

		LCD_moveCursor(1, 0);
		LCD_displayString("- : Change Pass");

		while (keypad_reading != '+' && keypad_reading != '-') {
    22a8:	80 91 14 01 	lds	r24, 0x0114
    22ac:	8b 32       	cpi	r24, 0x2B	; 43
    22ae:	29 f0       	breq	.+10     	; 0x22ba <main+0x1a2>
    22b0:	80 91 14 01 	lds	r24, 0x0114
    22b4:	8d 32       	cpi	r24, 0x2D	; 45
    22b6:	09 f0       	breq	.+2      	; 0x22ba <main+0x1a2>
    22b8:	81 cf       	rjmp	.-254    	; 0x21bc <main+0xa4>
			keypad_reading = KEYPAD_getPressedKey();
			_delay_ms(500); /* Press time */

		}

		receivebyte = UART_recieveByte();
    22ba:	0e 94 3f 18 	call	0x307e	; 0x307e <UART_recieveByte>
    22be:	8f 87       	std	Y+15, r24	; 0x0f

		/*	send entered option to the other mc by UART	*/
		UART_sendByte(keypad_reading);
    22c0:	80 91 14 01 	lds	r24, 0x0114
    22c4:	0e 94 28 18 	call	0x3050	; 0x3050 <UART_sendByte>

		if (keypad_reading == '+') {
    22c8:	80 91 14 01 	lds	r24, 0x0114
    22cc:	8b 32       	cpi	r24, 0x2B	; 43
    22ce:	81 f4       	brne	.+32     	; 0x22f0 <main+0x1d8>
			/*state_pass->0 incorrect password and still had chance
			 * state_pass->1 correct password entered
			 * state_pass->2 finished tthe chances of entering password and the buzzer worked and finished*/

			do {
				state_pass = Enter_pass();
    22d0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <Enter_pass>
    22d4:	88 8b       	std	Y+16, r24	; 0x10
			} while (state_pass == 0);
    22d6:	88 89       	ldd	r24, Y+16	; 0x10
    22d8:	88 23       	and	r24, r24
    22da:	d1 f3       	breq	.-12     	; 0x22d0 <main+0x1b8>
			if (state_pass == 2)
    22dc:	88 89       	ldd	r24, Y+16	; 0x10
    22de:	82 30       	cpi	r24, 0x02	; 2
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <main+0x1cc>
    22e2:	59 cf       	rjmp	.-334    	; 0x2196 <main+0x7e>
				continue;
			Door();
    22e4:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <Door>
			keypad_reading = -1;
    22e8:	8f ef       	ldi	r24, 0xFF	; 255
    22ea:	80 93 14 01 	sts	0x0114, r24
    22ee:	53 cf       	rjmp	.-346    	; 0x2196 <main+0x7e>
			continue;
		} else if (keypad_reading == '-') {
    22f0:	80 91 14 01 	lds	r24, 0x0114
    22f4:	8d 32       	cpi	r24, 0x2D	; 45
    22f6:	09 f0       	breq	.+2      	; 0x22fa <main+0x1e2>
    22f8:	4e cf       	rjmp	.-356    	; 0x2196 <main+0x7e>

			do {
				state_pass = Enter_pass();
    22fa:	0e 94 fd 14 	call	0x29fa	; 0x29fa <Enter_pass>
    22fe:	88 8b       	std	Y+16, r24	; 0x10
			} while (state_pass == 0);
    2300:	88 89       	ldd	r24, Y+16	; 0x10
    2302:	88 23       	and	r24, r24
    2304:	d1 f3       	breq	.-12     	; 0x22fa <main+0x1e2>
			if (state_pass == 2)
    2306:	88 89       	ldd	r24, Y+16	; 0x10
    2308:	82 30       	cpi	r24, 0x02	; 2
    230a:	09 f4       	brne	.+2      	; 0x230e <main+0x1f6>
    230c:	44 cf       	rjmp	.-376    	; 0x2196 <main+0x7e>
				continue;
			createPassword();
    230e:	0e 94 8d 11 	call	0x231a	; 0x231a <createPassword>
			status = sendpassword();
    2312:	0e 94 f5 12 	call	0x25ea	; 0x25ea <sendpassword>
    2316:	89 8b       	std	Y+17, r24	; 0x11
    2318:	3e cf       	rjmp	.-388    	; 0x2196 <main+0x7e>

0000231a <createPassword>:

/*Function Definition*/

/*To create the password or change it*/

void createPassword() {
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	6c 97       	sbiw	r28, 0x1c	; 28
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    232e:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
	LCD_displayString("Plz enter pass:");
    2332:	8e e7       	ldi	r24, 0x7E	; 126
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
	LCD_moveCursor(1, 0);
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	60 e0       	ldi	r22, 0x00	; 0
    233e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_moveCursor>
	pass_inc = 0;
    2342:	10 92 27 01 	sts	0x0127, r1
    2346:	8f c0       	rjmp	.+286    	; 0x2466 <createPassword+0x14c>
	while (pass_inc < password_length) {
		/* wait for user to press on any key to proceed to next step*/

		/*	get key pressed from keypad	*/
		keypad_reading = KEYPAD_getPressedKey();
    2348:	0e 94 ca 09 	call	0x1394	; 0x1394 <KEYPAD_getPressedKey>
    234c:	80 93 14 01 	sts	0x0114, r24
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	aa ef       	ldi	r26, 0xFA	; 250
    2356:	b3 e4       	ldi	r27, 0x43	; 67
    2358:	89 8f       	std	Y+25, r24	; 0x19
    235a:	9a 8f       	std	Y+26, r25	; 0x1a
    235c:	ab 8f       	std	Y+27, r26	; 0x1b
    235e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2360:	69 8d       	ldd	r22, Y+25	; 0x19
    2362:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2364:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2366:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	4a ef       	ldi	r20, 0xFA	; 250
    236e:	54 e4       	ldi	r21, 0x44	; 68
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	8d 8b       	std	Y+21, r24	; 0x15
    237a:	9e 8b       	std	Y+22, r25	; 0x16
    237c:	af 8b       	std	Y+23, r26	; 0x17
    237e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2380:	6d 89       	ldd	r22, Y+21	; 0x15
    2382:	7e 89       	ldd	r23, Y+22	; 0x16
    2384:	8f 89       	ldd	r24, Y+23	; 0x17
    2386:	98 8d       	ldd	r25, Y+24	; 0x18
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e8       	ldi	r20, 0x80	; 128
    238e:	5f e3       	ldi	r21, 0x3F	; 63
    2390:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2394:	88 23       	and	r24, r24
    2396:	2c f4       	brge	.+10     	; 0x23a2 <createPassword+0x88>
		__ticks = 1;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9c 8b       	std	Y+20, r25	; 0x14
    239e:	8b 8b       	std	Y+19, r24	; 0x13
    23a0:	3f c0       	rjmp	.+126    	; 0x2420 <createPassword+0x106>
	else if (__tmp > 65535)
    23a2:	6d 89       	ldd	r22, Y+21	; 0x15
    23a4:	7e 89       	ldd	r23, Y+22	; 0x16
    23a6:	8f 89       	ldd	r24, Y+23	; 0x17
    23a8:	98 8d       	ldd	r25, Y+24	; 0x18
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	3f ef       	ldi	r19, 0xFF	; 255
    23ae:	4f e7       	ldi	r20, 0x7F	; 127
    23b0:	57 e4       	ldi	r21, 0x47	; 71
    23b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b6:	18 16       	cp	r1, r24
    23b8:	4c f5       	brge	.+82     	; 0x240c <createPassword+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ba:	69 8d       	ldd	r22, Y+25	; 0x19
    23bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e2       	ldi	r20, 0x20	; 32
    23c8:	51 e4       	ldi	r21, 0x41	; 65
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9c 8b       	std	Y+20, r25	; 0x14
    23e0:	8b 8b       	std	Y+19, r24	; 0x13
    23e2:	0f c0       	rjmp	.+30     	; 0x2402 <createPassword+0xe8>
    23e4:	88 ec       	ldi	r24, 0xC8	; 200
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9a 8b       	std	Y+18, r25	; 0x12
    23ea:	89 8b       	std	Y+17, r24	; 0x11
    23ec:	89 89       	ldd	r24, Y+17	; 0x11
    23ee:	9a 89       	ldd	r25, Y+18	; 0x12
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <createPassword+0xd6>
    23f4:	9a 8b       	std	Y+18, r25	; 0x12
    23f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f8:	8b 89       	ldd	r24, Y+19	; 0x13
    23fa:	9c 89       	ldd	r25, Y+20	; 0x14
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	9c 8b       	std	Y+20, r25	; 0x14
    2400:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2402:	8b 89       	ldd	r24, Y+19	; 0x13
    2404:	9c 89       	ldd	r25, Y+20	; 0x14
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	69 f7       	brne	.-38     	; 0x23e4 <createPassword+0xca>
    240a:	14 c0       	rjmp	.+40     	; 0x2434 <createPassword+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240c:	6d 89       	ldd	r22, Y+21	; 0x15
    240e:	7e 89       	ldd	r23, Y+22	; 0x16
    2410:	8f 89       	ldd	r24, Y+23	; 0x17
    2412:	98 8d       	ldd	r25, Y+24	; 0x18
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9c 8b       	std	Y+20, r25	; 0x14
    241e:	8b 8b       	std	Y+19, r24	; 0x13
    2420:	8b 89       	ldd	r24, Y+19	; 0x13
    2422:	9c 89       	ldd	r25, Y+20	; 0x14
    2424:	98 8b       	std	Y+16, r25	; 0x10
    2426:	8f 87       	std	Y+15, r24	; 0x0f
    2428:	8f 85       	ldd	r24, Y+15	; 0x0f
    242a:	98 89       	ldd	r25, Y+16	; 0x10
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <createPassword+0x112>
    2430:	98 8b       	std	Y+16, r25	; 0x10
    2432:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		if (keypad_reading <= 9 && keypad_reading >= 0) {
    2434:	80 91 14 01 	lds	r24, 0x0114
    2438:	8a 30       	cpi	r24, 0x0A	; 10
    243a:	a8 f4       	brcc	.+42     	; 0x2466 <createPassword+0x14c>

			LCD_displayCharacter('*');
    243c:	8a e2       	ldi	r24, 0x2A	; 42
    243e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <LCD_displayCharacter>
			//LCD_intgerToString(keypad_reading);

			/*	password 1 storing in array	*/
			password[pass_inc] = keypad_reading;
    2442:	80 91 27 01 	lds	r24, 0x0127
    2446:	88 2f       	mov	r24, r24
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	20 91 14 01 	lds	r18, 0x0114
    244e:	fc 01       	movw	r30, r24
    2450:	e0 5e       	subi	r30, 0xE0	; 224
    2452:	fe 4f       	sbci	r31, 0xFE	; 254
    2454:	20 83       	st	Z, r18
			pass_inc++;
    2456:	80 91 27 01 	lds	r24, 0x0127
    245a:	8f 5f       	subi	r24, 0xFF	; 255
    245c:	80 93 27 01 	sts	0x0127, r24
			keypad_reading = -1;
    2460:	8f ef       	ldi	r24, 0xFF	; 255
    2462:	80 93 14 01 	sts	0x0114, r24

	LCD_clearScreen();
	LCD_displayString("Plz enter pass:");
	LCD_moveCursor(1, 0);
	pass_inc = 0;
	while (pass_inc < password_length) {
    2466:	80 91 27 01 	lds	r24, 0x0127
    246a:	85 30       	cpi	r24, 0x05	; 5
    246c:	08 f4       	brcc	.+2      	; 0x2470 <createPassword+0x156>
    246e:	6c cf       	rjmp	.-296    	; 0x2348 <createPassword+0x2e>
			keypad_reading = -1;

		}

	}
	password[5] = '#'; /*Assign the last character as '#'*/
    2470:	83 e2       	ldi	r24, 0x23	; 35
    2472:	80 93 25 01 	sts	0x0125, r24
	password[6] = '\0'; /*Terminate string to be sent by UART*/
    2476:	10 92 26 01 	sts	0x0126, r1

	/* wait for user to press on the enter key to proceed to next step*/
	while (KEYPAD_getPressedKey() != ENTER_KEY)
    247a:	0e 94 ca 09 	call	0x1394	; 0x1394 <KEYPAD_getPressedKey>
    247e:	8d 33       	cpi	r24, 0x3D	; 61
    2480:	e1 f7       	brne	.-8      	; 0x247a <createPassword+0x160>
		;

	/*wrtite confirm pass*/
	LCD_clearScreen();
    2482:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
	LCD_displayString("Plz Re-enter the");
    2486:	8e e8       	ldi	r24, 0x8E	; 142
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
	LCD_moveCursor(1, 0);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_moveCursor>
	LCD_displayString("same pass:");
    2496:	8f e9       	ldi	r24, 0x9F	; 159
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
	pass_confirm_inc = 0;
    249e:	10 92 2f 01 	sts	0x012F, r1
    24a2:	8c c0       	rjmp	.+280    	; 0x25bc <createPassword+0x2a2>
	while (pass_confirm_inc < password_length) {
		/*	get key pressed from keypad	*/
		keypad_reading = KEYPAD_getPressedKey();
    24a4:	0e 94 ca 09 	call	0x1394	; 0x1394 <KEYPAD_getPressedKey>
    24a8:	80 93 14 01 	sts	0x0114, r24
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	aa ef       	ldi	r26, 0xFA	; 250
    24b2:	b3 e4       	ldi	r27, 0x43	; 67
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
    24b6:	9c 87       	std	Y+12, r25	; 0x0c
    24b8:	ad 87       	std	Y+13, r26	; 0x0d
    24ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	4a ef       	ldi	r20, 0xFA	; 250
    24ca:	54 e4       	ldi	r21, 0x44	; 68
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	8f 83       	std	Y+7, r24	; 0x07
    24d6:	98 87       	std	Y+8, r25	; 0x08
    24d8:	a9 87       	std	Y+9, r26	; 0x09
    24da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	2c f4       	brge	.+10     	; 0x24fe <createPassword+0x1e4>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	3f c0       	rjmp	.+126    	; 0x257c <createPassword+0x262>
	else if (__tmp > 65535)
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	4f e7       	ldi	r20, 0x7F	; 127
    250c:	57 e4       	ldi	r21, 0x47	; 71
    250e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2512:	18 16       	cp	r1, r24
    2514:	4c f5       	brge	.+82     	; 0x2568 <createPassword+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	6b 85       	ldd	r22, Y+11	; 0x0b
    2518:	7c 85       	ldd	r23, Y+12	; 0x0c
    251a:	8d 85       	ldd	r24, Y+13	; 0x0d
    251c:	9e 85       	ldd	r25, Y+14	; 0x0e
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	0f c0       	rjmp	.+30     	; 0x255e <createPassword+0x244>
    2540:	88 ec       	ldi	r24, 0xC8	; 200
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9c 83       	std	Y+4, r25	; 0x04
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <createPassword+0x232>
    2550:	9c 83       	std	Y+4, r25	; 0x04
    2552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	69 f7       	brne	.-38     	; 0x2540 <createPassword+0x226>
    2566:	14 c0       	rjmp	.+40     	; 0x2590 <createPassword+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2568:	6f 81       	ldd	r22, Y+7	; 0x07
    256a:	78 85       	ldd	r23, Y+8	; 0x08
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <createPassword+0x26e>
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		if (keypad_reading <= 9 && keypad_reading >= 0) {
    2590:	80 91 14 01 	lds	r24, 0x0114
    2594:	8a 30       	cpi	r24, 0x0A	; 10
    2596:	90 f4       	brcc	.+36     	; 0x25bc <createPassword+0x2a2>
			/* show interaction the input	*/
			LCD_displayCharacter('*');
    2598:	8a e2       	ldi	r24, 0x2A	; 42
    259a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <LCD_displayCharacter>

			/*	password storing in array	*/
			confirm_password[pass_confirm_inc] = keypad_reading;
    259e:	80 91 2f 01 	lds	r24, 0x012F
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	20 91 14 01 	lds	r18, 0x0114
    25aa:	fc 01       	movw	r30, r24
    25ac:	e8 5d       	subi	r30, 0xD8	; 216
    25ae:	fe 4f       	sbci	r31, 0xFE	; 254
    25b0:	20 83       	st	Z, r18
			pass_confirm_inc++;
    25b2:	80 91 2f 01 	lds	r24, 0x012F
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	80 93 2f 01 	sts	0x012F, r24
	LCD_clearScreen();
	LCD_displayString("Plz Re-enter the");
	LCD_moveCursor(1, 0);
	LCD_displayString("same pass:");
	pass_confirm_inc = 0;
	while (pass_confirm_inc < password_length) {
    25bc:	80 91 2f 01 	lds	r24, 0x012F
    25c0:	85 30       	cpi	r24, 0x05	; 5
    25c2:	08 f4       	brcc	.+2      	; 0x25c6 <createPassword+0x2ac>
    25c4:	6f cf       	rjmp	.-290    	; 0x24a4 <createPassword+0x18a>
			pass_confirm_inc++;
		}

	}

	confirm_password[5] = '#'; /*Assign the last character as '#'*/
    25c6:	83 e2       	ldi	r24, 0x23	; 35
    25c8:	80 93 2d 01 	sts	0x012D, r24
	confirm_password[6] = '\0'; /*Terminate string to be sent by UART*/
    25cc:	10 92 2e 01 	sts	0x012E, r1

	/* wait for user to press on the enter key to proceed to next step*/
	while (KEYPAD_getPressedKey() != ENTER_KEY)
    25d0:	0e 94 ca 09 	call	0x1394	; 0x1394 <KEYPAD_getPressedKey>
    25d4:	8d 33       	cpi	r24, 0x3D	; 61
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <createPassword+0x2b6>
		;

}
    25d8:	6c 96       	adiw	r28, 0x1c	; 28
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <sendpassword>:

/*To send the password to the other mc*/

uint8 sendpassword() {
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	ea 97       	sbiw	r28, 0x3a	; 58
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61

	/*while (UART_recieveByte() != CONTROL_MC2_READY_UART) {
		}	//it's better to use this method
	 */

	receiveByte = UART_recieveByte();
    25fe:	0e 94 3f 18 	call	0x307e	; 0x307e <UART_recieveByte>
    2602:	89 af       	std	Y+57, r24	; 0x39

	/*	send the password to the other mc by UART	*/
	UART_sendString(password);
    2604:	80 e2       	ldi	r24, 0x20	; 32
    2606:	91 e0       	ldi	r25, 0x01	; 1
    2608:	0e 94 4e 18 	call	0x309c	; 0x309c <UART_sendString>

	/* waiting for a ready signal from the control unit */

	receiveByte = UART_recieveByte();
    260c:	0e 94 3f 18 	call	0x307e	; 0x307e <UART_recieveByte>
    2610:	89 af       	std	Y+57, r24	; 0x39

	/*	send confirmation password to the other mc by UART	*/
	UART_sendString(confirm_password);
    2612:	88 e2       	ldi	r24, 0x28	; 40
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	0e 94 4e 18 	call	0x309c	; 0x309c <UART_sendString>

	/* waiting for a ready signal from the control unit */
	LCD_clearScreen();
    261a:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a6 e9       	ldi	r26, 0x96	; 150
    2624:	b3 e4       	ldi	r27, 0x43	; 67
    2626:	8d ab       	std	Y+53, r24	; 0x35
    2628:	9e ab       	std	Y+54, r25	; 0x36
    262a:	af ab       	std	Y+55, r26	; 0x37
    262c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262e:	6d a9       	ldd	r22, Y+53	; 0x35
    2630:	7e a9       	ldd	r23, Y+54	; 0x36
    2632:	8f a9       	ldd	r24, Y+55	; 0x37
    2634:	98 ad       	ldd	r25, Y+56	; 0x38
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	4a ef       	ldi	r20, 0xFA	; 250
    263c:	54 e4       	ldi	r21, 0x44	; 68
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	89 ab       	std	Y+49, r24	; 0x31
    2648:	9a ab       	std	Y+50, r25	; 0x32
    264a:	ab ab       	std	Y+51, r26	; 0x33
    264c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    264e:	69 a9       	ldd	r22, Y+49	; 0x31
    2650:	7a a9       	ldd	r23, Y+50	; 0x32
    2652:	8b a9       	ldd	r24, Y+51	; 0x33
    2654:	9c a9       	ldd	r25, Y+52	; 0x34
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e8       	ldi	r20, 0x80	; 128
    265c:	5f e3       	ldi	r21, 0x3F	; 63
    265e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2662:	88 23       	and	r24, r24
    2664:	2c f4       	brge	.+10     	; 0x2670 <sendpassword+0x86>
		__ticks = 1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	98 ab       	std	Y+48, r25	; 0x30
    266c:	8f a7       	std	Y+47, r24	; 0x2f
    266e:	3f c0       	rjmp	.+126    	; 0x26ee <sendpassword+0x104>
	else if (__tmp > 65535)
    2670:	69 a9       	ldd	r22, Y+49	; 0x31
    2672:	7a a9       	ldd	r23, Y+50	; 0x32
    2674:	8b a9       	ldd	r24, Y+51	; 0x33
    2676:	9c a9       	ldd	r25, Y+52	; 0x34
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	3f ef       	ldi	r19, 0xFF	; 255
    267c:	4f e7       	ldi	r20, 0x7F	; 127
    267e:	57 e4       	ldi	r21, 0x47	; 71
    2680:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2684:	18 16       	cp	r1, r24
    2686:	4c f5       	brge	.+82     	; 0x26da <sendpassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2688:	6d a9       	ldd	r22, Y+53	; 0x35
    268a:	7e a9       	ldd	r23, Y+54	; 0x36
    268c:	8f a9       	ldd	r24, Y+55	; 0x37
    268e:	98 ad       	ldd	r25, Y+56	; 0x38
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e2       	ldi	r20, 0x20	; 32
    2696:	51 e4       	ldi	r21, 0x41	; 65
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	bc 01       	movw	r22, r24
    26a2:	cd 01       	movw	r24, r26
    26a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	98 ab       	std	Y+48, r25	; 0x30
    26ae:	8f a7       	std	Y+47, r24	; 0x2f
    26b0:	0f c0       	rjmp	.+30     	; 0x26d0 <sendpassword+0xe6>
    26b2:	88 ec       	ldi	r24, 0xC8	; 200
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9e a7       	std	Y+46, r25	; 0x2e
    26b8:	8d a7       	std	Y+45, r24	; 0x2d
    26ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    26bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <sendpassword+0xd4>
    26c2:	9e a7       	std	Y+46, r25	; 0x2e
    26c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c8:	98 a9       	ldd	r25, Y+48	; 0x30
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	98 ab       	std	Y+48, r25	; 0x30
    26ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d2:	98 a9       	ldd	r25, Y+48	; 0x30
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	69 f7       	brne	.-38     	; 0x26b2 <sendpassword+0xc8>
    26d8:	14 c0       	rjmp	.+40     	; 0x2702 <sendpassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26da:	69 a9       	ldd	r22, Y+49	; 0x31
    26dc:	7a a9       	ldd	r23, Y+50	; 0x32
    26de:	8b a9       	ldd	r24, Y+51	; 0x33
    26e0:	9c a9       	ldd	r25, Y+52	; 0x34
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	98 ab       	std	Y+48, r25	; 0x30
    26ec:	8f a7       	std	Y+47, r24	; 0x2f
    26ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    26f0:	98 a9       	ldd	r25, Y+48	; 0x30
    26f2:	9c a7       	std	Y+44, r25	; 0x2c
    26f4:	8b a7       	std	Y+43, r24	; 0x2b
    26f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    26f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <sendpassword+0x110>
    26fe:	9c a7       	std	Y+44, r25	; 0x2c
    2700:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(300);

	/* Send MC2_READY byte to MC1 to ask it to send the string */
	UART_sendByte(HMI_MC1_READY_UART);
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	0e 94 28 18 	call	0x3050	; 0x3050 <UART_sendByte>

	matching = UART_recieveByte();
    2708:	0e 94 3f 18 	call	0x307e	; 0x307e <UART_recieveByte>
    270c:	80 93 1e 01 	sts	0x011E, r24
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	aa ef       	ldi	r26, 0xFA	; 250
    2716:	b3 e4       	ldi	r27, 0x43	; 67
    2718:	8f a3       	std	Y+39, r24	; 0x27
    271a:	98 a7       	std	Y+40, r25	; 0x28
    271c:	a9 a7       	std	Y+41, r26	; 0x29
    271e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	6f a1       	ldd	r22, Y+39	; 0x27
    2722:	78 a5       	ldd	r23, Y+40	; 0x28
    2724:	89 a5       	ldd	r24, Y+41	; 0x29
    2726:	9a a5       	ldd	r25, Y+42	; 0x2a
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8b a3       	std	Y+35, r24	; 0x23
    273a:	9c a3       	std	Y+36, r25	; 0x24
    273c:	ad a3       	std	Y+37, r26	; 0x25
    273e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2740:	6b a1       	ldd	r22, Y+35	; 0x23
    2742:	7c a1       	ldd	r23, Y+36	; 0x24
    2744:	8d a1       	ldd	r24, Y+37	; 0x25
    2746:	9e a1       	ldd	r25, Y+38	; 0x26
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	2c f4       	brge	.+10     	; 0x2762 <sendpassword+0x178>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9a a3       	std	Y+34, r25	; 0x22
    275e:	89 a3       	std	Y+33, r24	; 0x21
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <sendpassword+0x1f6>
	else if (__tmp > 65535)
    2762:	6b a1       	ldd	r22, Y+35	; 0x23
    2764:	7c a1       	ldd	r23, Y+36	; 0x24
    2766:	8d a1       	ldd	r24, Y+37	; 0x25
    2768:	9e a1       	ldd	r25, Y+38	; 0x26
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	4c f5       	brge	.+82     	; 0x27cc <sendpassword+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277a:	6f a1       	ldd	r22, Y+39	; 0x27
    277c:	78 a5       	ldd	r23, Y+40	; 0x28
    277e:	89 a5       	ldd	r24, Y+41	; 0x29
    2780:	9a a5       	ldd	r25, Y+42	; 0x2a
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9a a3       	std	Y+34, r25	; 0x22
    27a0:	89 a3       	std	Y+33, r24	; 0x21
    27a2:	0f c0       	rjmp	.+30     	; 0x27c2 <sendpassword+0x1d8>
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	98 a3       	std	Y+32, r25	; 0x20
    27aa:	8f 8f       	std	Y+31, r24	; 0x1f
    27ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27ae:	98 a1       	ldd	r25, Y+32	; 0x20
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <sendpassword+0x1c6>
    27b4:	98 a3       	std	Y+32, r25	; 0x20
    27b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	89 a1       	ldd	r24, Y+33	; 0x21
    27ba:	9a a1       	ldd	r25, Y+34	; 0x22
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	9a a3       	std	Y+34, r25	; 0x22
    27c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	89 a1       	ldd	r24, Y+33	; 0x21
    27c4:	9a a1       	ldd	r25, Y+34	; 0x22
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <sendpassword+0x1ba>
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <sendpassword+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	6b a1       	ldd	r22, Y+35	; 0x23
    27ce:	7c a1       	ldd	r23, Y+36	; 0x24
    27d0:	8d a1       	ldd	r24, Y+37	; 0x25
    27d2:	9e a1       	ldd	r25, Y+38	; 0x26
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9a a3       	std	Y+34, r25	; 0x22
    27de:	89 a3       	std	Y+33, r24	; 0x21
    27e0:	89 a1       	ldd	r24, Y+33	; 0x21
    27e2:	9a a1       	ldd	r25, Y+34	; 0x22
    27e4:	9e 8f       	std	Y+30, r25	; 0x1e
    27e6:	8d 8f       	std	Y+29, r24	; 0x1d
    27e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <sendpassword+0x202>
    27f0:	9e 8f       	std	Y+30, r25	; 0x1e
    27f2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	/*	if two passwords don't match*/
	if (matching == 0) {
    27f4:	80 91 1e 01 	lds	r24, 0x011E
    27f8:	88 23       	and	r24, r24
    27fa:	09 f0       	breq	.+2      	; 0x27fe <sendpassword+0x214>
    27fc:	7a c0       	rjmp	.+244    	; 0x28f2 <sendpassword+0x308>
		/*	clear the screen and display not matching	*/
		LCD_clearScreen();
    27fe:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
		LCD_displayString("Not Matching");
    2802:	8a ea       	ldi	r24, 0xAA	; 170
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	aa ef       	ldi	r26, 0xFA	; 250
    2810:	b3 e4       	ldi	r27, 0x43	; 67
    2812:	89 8f       	std	Y+25, r24	; 0x19
    2814:	9a 8f       	std	Y+26, r25	; 0x1a
    2816:	ab 8f       	std	Y+27, r26	; 0x1b
    2818:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281a:	69 8d       	ldd	r22, Y+25	; 0x19
    281c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    281e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	4a ef       	ldi	r20, 0xFA	; 250
    2828:	54 e4       	ldi	r21, 0x44	; 68
    282a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	8d 8b       	std	Y+21, r24	; 0x15
    2834:	9e 8b       	std	Y+22, r25	; 0x16
    2836:	af 8b       	std	Y+23, r26	; 0x17
    2838:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    283a:	6d 89       	ldd	r22, Y+21	; 0x15
    283c:	7e 89       	ldd	r23, Y+22	; 0x16
    283e:	8f 89       	ldd	r24, Y+23	; 0x17
    2840:	98 8d       	ldd	r25, Y+24	; 0x18
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e8       	ldi	r20, 0x80	; 128
    2848:	5f e3       	ldi	r21, 0x3F	; 63
    284a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    284e:	88 23       	and	r24, r24
    2850:	2c f4       	brge	.+10     	; 0x285c <sendpassword+0x272>
		__ticks = 1;
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	9c 8b       	std	Y+20, r25	; 0x14
    2858:	8b 8b       	std	Y+19, r24	; 0x13
    285a:	3f c0       	rjmp	.+126    	; 0x28da <sendpassword+0x2f0>
	else if (__tmp > 65535)
    285c:	6d 89       	ldd	r22, Y+21	; 0x15
    285e:	7e 89       	ldd	r23, Y+22	; 0x16
    2860:	8f 89       	ldd	r24, Y+23	; 0x17
    2862:	98 8d       	ldd	r25, Y+24	; 0x18
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	3f ef       	ldi	r19, 0xFF	; 255
    2868:	4f e7       	ldi	r20, 0x7F	; 127
    286a:	57 e4       	ldi	r21, 0x47	; 71
    286c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2870:	18 16       	cp	r1, r24
    2872:	4c f5       	brge	.+82     	; 0x28c6 <sendpassword+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2874:	69 8d       	ldd	r22, Y+25	; 0x19
    2876:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2878:	8b 8d       	ldd	r24, Y+27	; 0x1b
    287a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e2       	ldi	r20, 0x20	; 32
    2882:	51 e4       	ldi	r21, 0x41	; 65
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	9c 8b       	std	Y+20, r25	; 0x14
    289a:	8b 8b       	std	Y+19, r24	; 0x13
    289c:	0f c0       	rjmp	.+30     	; 0x28bc <sendpassword+0x2d2>
    289e:	88 ec       	ldi	r24, 0xC8	; 200
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9a 8b       	std	Y+18, r25	; 0x12
    28a4:	89 8b       	std	Y+17, r24	; 0x11
    28a6:	89 89       	ldd	r24, Y+17	; 0x11
    28a8:	9a 89       	ldd	r25, Y+18	; 0x12
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <sendpassword+0x2c0>
    28ae:	9a 8b       	std	Y+18, r25	; 0x12
    28b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b2:	8b 89       	ldd	r24, Y+19	; 0x13
    28b4:	9c 89       	ldd	r25, Y+20	; 0x14
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	9c 8b       	std	Y+20, r25	; 0x14
    28ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	69 f7       	brne	.-38     	; 0x289e <sendpassword+0x2b4>
    28c4:	14 c0       	rjmp	.+40     	; 0x28ee <sendpassword+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c6:	6d 89       	ldd	r22, Y+21	; 0x15
    28c8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ca:	8f 89       	ldd	r24, Y+23	; 0x17
    28cc:	98 8d       	ldd	r25, Y+24	; 0x18
    28ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	9c 8b       	std	Y+20, r25	; 0x14
    28d8:	8b 8b       	std	Y+19, r24	; 0x13
    28da:	8b 89       	ldd	r24, Y+19	; 0x13
    28dc:	9c 89       	ldd	r25, Y+20	; 0x14
    28de:	98 8b       	std	Y+16, r25	; 0x10
    28e0:	8f 87       	std	Y+15, r24	; 0x0f
    28e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e4:	98 89       	ldd	r25, Y+16	; 0x10
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <sendpassword+0x2fc>
    28ea:	98 8b       	std	Y+16, r25	; 0x10
    28ec:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(500);

		return 0;
    28ee:	1a ae       	std	Y+58, r1	; 0x3a
    28f0:	7a c0       	rjmp	.+244    	; 0x29e6 <sendpassword+0x3fc>
	}
	/*	clear the screen and display not matching	*/
	LCD_clearScreen();
    28f2:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
	LCD_displayString("Created Welcome");
    28f6:	87 eb       	ldi	r24, 0xB7	; 183
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	aa ef       	ldi	r26, 0xFA	; 250
    2904:	b3 e4       	ldi	r27, 0x43	; 67
    2906:	8b 87       	std	Y+11, r24	; 0x0b
    2908:	9c 87       	std	Y+12, r25	; 0x0c
    290a:	ad 87       	std	Y+13, r26	; 0x0d
    290c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2910:	7c 85       	ldd	r23, Y+12	; 0x0c
    2912:	8d 85       	ldd	r24, Y+13	; 0x0d
    2914:	9e 85       	ldd	r25, Y+14	; 0x0e
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4a ef       	ldi	r20, 0xFA	; 250
    291c:	54 e4       	ldi	r21, 0x44	; 68
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	8f 83       	std	Y+7, r24	; 0x07
    2928:	98 87       	std	Y+8, r25	; 0x08
    292a:	a9 87       	std	Y+9, r26	; 0x09
    292c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    292e:	6f 81       	ldd	r22, Y+7	; 0x07
    2930:	78 85       	ldd	r23, Y+8	; 0x08
    2932:	89 85       	ldd	r24, Y+9	; 0x09
    2934:	9a 85       	ldd	r25, Y+10	; 0x0a
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e8       	ldi	r20, 0x80	; 128
    293c:	5f e3       	ldi	r21, 0x3F	; 63
    293e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2942:	88 23       	and	r24, r24
    2944:	2c f4       	brge	.+10     	; 0x2950 <sendpassword+0x366>
		__ticks = 1;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9e 83       	std	Y+6, r25	; 0x06
    294c:	8d 83       	std	Y+5, r24	; 0x05
    294e:	3f c0       	rjmp	.+126    	; 0x29ce <sendpassword+0x3e4>
	else if (__tmp > 65535)
    2950:	6f 81       	ldd	r22, Y+7	; 0x07
    2952:	78 85       	ldd	r23, Y+8	; 0x08
    2954:	89 85       	ldd	r24, Y+9	; 0x09
    2956:	9a 85       	ldd	r25, Y+10	; 0x0a
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	4c f5       	brge	.+82     	; 0x29ba <sendpassword+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2968:	6b 85       	ldd	r22, Y+11	; 0x0b
    296a:	7c 85       	ldd	r23, Y+12	; 0x0c
    296c:	8d 85       	ldd	r24, Y+13	; 0x0d
    296e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e2       	ldi	r20, 0x20	; 32
    2976:	51 e4       	ldi	r21, 0x41	; 65
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9e 83       	std	Y+6, r25	; 0x06
    298e:	8d 83       	std	Y+5, r24	; 0x05
    2990:	0f c0       	rjmp	.+30     	; 0x29b0 <sendpassword+0x3c6>
    2992:	88 ec       	ldi	r24, 0xC8	; 200
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9c 83       	std	Y+4, r25	; 0x04
    2998:	8b 83       	std	Y+3, r24	; 0x03
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <sendpassword+0x3b4>
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	69 f7       	brne	.-38     	; 0x2992 <sendpassword+0x3a8>
    29b8:	14 c0       	rjmp	.+40     	; 0x29e2 <sendpassword+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ba:	6f 81       	ldd	r22, Y+7	; 0x07
    29bc:	78 85       	ldd	r23, Y+8	; 0x08
    29be:	89 85       	ldd	r24, Y+9	; 0x09
    29c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9e 83       	std	Y+6, r25	; 0x06
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	9a 81       	ldd	r25, Y+2	; 0x02
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <sendpassword+0x3f0>
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	return 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	8a af       	std	Y+58, r24	; 0x3a
    29e6:	8a ad       	ldd	r24, Y+58	; 0x3a

}
    29e8:	ea 96       	adiw	r28, 0x3a	; 58
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <Enter_pass>:

/*To enter the password in the main menu*/

uint8 Enter_pass(void) {
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	ea 97       	sbiw	r28, 0x3a	; 58
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
	/*debug*/
	LCD_clearScreen();
    2a0e:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
	LCD_displayString("Loading...");
    2a12:	87 ec       	ldi	r24, 0xC7	; 199
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	aa e7       	ldi	r26, 0x7A	; 122
    2a20:	b4 e4       	ldi	r27, 0x44	; 68
    2a22:	8d ab       	std	Y+53, r24	; 0x35
    2a24:	9e ab       	std	Y+54, r25	; 0x36
    2a26:	af ab       	std	Y+55, r26	; 0x37
    2a28:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a2c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a30:	98 ad       	ldd	r25, Y+56	; 0x38
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a ef       	ldi	r20, 0xFA	; 250
    2a38:	54 e4       	ldi	r21, 0x44	; 68
    2a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	89 ab       	std	Y+49, r24	; 0x31
    2a44:	9a ab       	std	Y+50, r25	; 0x32
    2a46:	ab ab       	std	Y+51, r26	; 0x33
    2a48:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a50:	9c a9       	ldd	r25, Y+52	; 0x34
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e8       	ldi	r20, 0x80	; 128
    2a58:	5f e3       	ldi	r21, 0x3F	; 63
    2a5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a5e:	88 23       	and	r24, r24
    2a60:	2c f4       	brge	.+10     	; 0x2a6c <Enter_pass+0x72>
		__ticks = 1;
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	98 ab       	std	Y+48, r25	; 0x30
    2a68:	8f a7       	std	Y+47, r24	; 0x2f
    2a6a:	3f c0       	rjmp	.+126    	; 0x2aea <Enter_pass+0xf0>
	else if (__tmp > 65535)
    2a6c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a6e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a70:	8b a9       	ldd	r24, Y+51	; 0x33
    2a72:	9c a9       	ldd	r25, Y+52	; 0x34
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	3f ef       	ldi	r19, 0xFF	; 255
    2a78:	4f e7       	ldi	r20, 0x7F	; 127
    2a7a:	57 e4       	ldi	r21, 0x47	; 71
    2a7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a80:	18 16       	cp	r1, r24
    2a82:	4c f5       	brge	.+82     	; 0x2ad6 <Enter_pass+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a84:	6d a9       	ldd	r22, Y+53	; 0x35
    2a86:	7e a9       	ldd	r23, Y+54	; 0x36
    2a88:	8f a9       	ldd	r24, Y+55	; 0x37
    2a8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e2       	ldi	r20, 0x20	; 32
    2a92:	51 e4       	ldi	r21, 0x41	; 65
    2a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	98 ab       	std	Y+48, r25	; 0x30
    2aaa:	8f a7       	std	Y+47, r24	; 0x2f
    2aac:	0f c0       	rjmp	.+30     	; 0x2acc <Enter_pass+0xd2>
    2aae:	88 ec       	ldi	r24, 0xC8	; 200
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	9e a7       	std	Y+46, r25	; 0x2e
    2ab4:	8d a7       	std	Y+45, r24	; 0x2d
    2ab6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ab8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <Enter_pass+0xc0>
    2abe:	9e a7       	std	Y+46, r25	; 0x2e
    2ac0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	98 ab       	std	Y+48, r25	; 0x30
    2aca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ace:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	69 f7       	brne	.-38     	; 0x2aae <Enter_pass+0xb4>
    2ad4:	14 c0       	rjmp	.+40     	; 0x2afe <Enter_pass+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad8:	7a a9       	ldd	r23, Y+50	; 0x32
    2ada:	8b a9       	ldd	r24, Y+51	; 0x33
    2adc:	9c a9       	ldd	r25, Y+52	; 0x34
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	98 ab       	std	Y+48, r25	; 0x30
    2ae8:	8f a7       	std	Y+47, r24	; 0x2f
    2aea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aec:	98 a9       	ldd	r25, Y+48	; 0x30
    2aee:	9c a7       	std	Y+44, r25	; 0x2c
    2af0:	8b a7       	std	Y+43, r24	; 0x2b
    2af2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <Enter_pass+0xfc>
    2afa:	9c a7       	std	Y+44, r25	; 0x2c
    2afc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	/*end debug*/

	LCD_clearScreen();
    2afe:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
	LCD_displayString("Plz enter pass:");
    2b02:	8e e7       	ldi	r24, 0x7E	; 126
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
	LCD_moveCursor(1, 0);
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	60 e0       	ldi	r22, 0x00	; 0
    2b0e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <LCD_moveCursor>
	pass_inc = 0;
    2b12:	10 92 27 01 	sts	0x0127, r1
    2b16:	8c c0       	rjmp	.+280    	; 0x2c30 <Enter_pass+0x236>

	while (pass_inc < password_length) {

		keypad_reading = KEYPAD_getPressedKey();
    2b18:	0e 94 ca 09 	call	0x1394	; 0x1394 <KEYPAD_getPressedKey>
    2b1c:	80 93 14 01 	sts	0x0114, r24

		if (keypad_reading <= 9 && keypad_reading >= 0) {
    2b20:	80 91 14 01 	lds	r24, 0x0114
    2b24:	8a 30       	cpi	r24, 0x0A	; 10
    2b26:	90 f4       	brcc	.+36     	; 0x2b4c <Enter_pass+0x152>
			/* show * on LCD*/
			LCD_displayCharacter('*');
    2b28:	8a e2       	ldi	r24, 0x2A	; 42
    2b2a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <LCD_displayCharacter>

			/* storing in array	*/
			password[pass_inc] = keypad_reading;
    2b2e:	80 91 27 01 	lds	r24, 0x0127
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	20 91 14 01 	lds	r18, 0x0114
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	e0 5e       	subi	r30, 0xE0	; 224
    2b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b40:	20 83       	st	Z, r18

			pass_inc++;
    2b42:	80 91 27 01 	lds	r24, 0x0127
    2b46:	8f 5f       	subi	r24, 0xFF	; 255
    2b48:	80 93 27 01 	sts	0x0127, r24
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	aa ef       	ldi	r26, 0xFA	; 250
    2b52:	b3 e4       	ldi	r27, 0x43	; 67
    2b54:	8f a3       	std	Y+39, r24	; 0x27
    2b56:	98 a7       	std	Y+40, r25	; 0x28
    2b58:	a9 a7       	std	Y+41, r26	; 0x29
    2b5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b5e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b60:	89 a5       	ldd	r24, Y+41	; 0x29
    2b62:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4a ef       	ldi	r20, 0xFA	; 250
    2b6a:	54 e4       	ldi	r21, 0x44	; 68
    2b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	8b a3       	std	Y+35, r24	; 0x23
    2b76:	9c a3       	std	Y+36, r25	; 0x24
    2b78:	ad a3       	std	Y+37, r26	; 0x25
    2b7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b7c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b7e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b80:	8d a1       	ldd	r24, Y+37	; 0x25
    2b82:	9e a1       	ldd	r25, Y+38	; 0x26
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e8       	ldi	r20, 0x80	; 128
    2b8a:	5f e3       	ldi	r21, 0x3F	; 63
    2b8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b90:	88 23       	and	r24, r24
    2b92:	2c f4       	brge	.+10     	; 0x2b9e <Enter_pass+0x1a4>
		__ticks = 1;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	9a a3       	std	Y+34, r25	; 0x22
    2b9a:	89 a3       	std	Y+33, r24	; 0x21
    2b9c:	3f c0       	rjmp	.+126    	; 0x2c1c <Enter_pass+0x222>
	else if (__tmp > 65535)
    2b9e:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	3f ef       	ldi	r19, 0xFF	; 255
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	57 e4       	ldi	r21, 0x47	; 71
    2bae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	4c f5       	brge	.+82     	; 0x2c08 <Enter_pass+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb6:	6f a1       	ldd	r22, Y+39	; 0x27
    2bb8:	78 a5       	ldd	r23, Y+40	; 0x28
    2bba:	89 a5       	ldd	r24, Y+41	; 0x29
    2bbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e2       	ldi	r20, 0x20	; 32
    2bc4:	51 e4       	ldi	r21, 0x41	; 65
    2bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	bc 01       	movw	r22, r24
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	9a a3       	std	Y+34, r25	; 0x22
    2bdc:	89 a3       	std	Y+33, r24	; 0x21
    2bde:	0f c0       	rjmp	.+30     	; 0x2bfe <Enter_pass+0x204>
    2be0:	88 ec       	ldi	r24, 0xC8	; 200
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	98 a3       	std	Y+32, r25	; 0x20
    2be6:	8f 8f       	std	Y+31, r24	; 0x1f
    2be8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bea:	98 a1       	ldd	r25, Y+32	; 0x20
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <Enter_pass+0x1f2>
    2bf0:	98 a3       	std	Y+32, r25	; 0x20
    2bf2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	9a a3       	std	Y+34, r25	; 0x22
    2bfc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfe:	89 a1       	ldd	r24, Y+33	; 0x21
    2c00:	9a a1       	ldd	r25, Y+34	; 0x22
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	69 f7       	brne	.-38     	; 0x2be0 <Enter_pass+0x1e6>
    2c06:	14 c0       	rjmp	.+40     	; 0x2c30 <Enter_pass+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c08:	6b a1       	ldd	r22, Y+35	; 0x23
    2c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9a a3       	std	Y+34, r25	; 0x22
    2c1a:	89 a3       	std	Y+33, r24	; 0x21
    2c1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c20:	9e 8f       	std	Y+30, r25	; 0x1e
    2c22:	8d 8f       	std	Y+29, r24	; 0x1d
    2c24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <Enter_pass+0x22e>
    2c2c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c2e:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_clearScreen();
	LCD_displayString("Plz enter pass:");
	LCD_moveCursor(1, 0);
	pass_inc = 0;

	while (pass_inc < password_length) {
    2c30:	80 91 27 01 	lds	r24, 0x0127
    2c34:	85 30       	cpi	r24, 0x05	; 5
    2c36:	08 f4       	brcc	.+2      	; 0x2c3a <Enter_pass+0x240>
    2c38:	6f cf       	rjmp	.-290    	; 0x2b18 <Enter_pass+0x11e>
			//keypad_reading = -1;
		}
		_delay_ms(500);
	}

	password[5] = '#'; /*Assign the last character as '#'*/
    2c3a:	83 e2       	ldi	r24, 0x23	; 35
    2c3c:	80 93 25 01 	sts	0x0125, r24
	password[6] = '\0'; /*Terminate string to be sent by UART*/
    2c40:	10 92 26 01 	sts	0x0126, r1

	/* wait for user to press on the enter key to proceed to next step*/
	while (KEYPAD_getPressedKey() != ENTER_KEY)
    2c44:	0e 94 ca 09 	call	0x1394	; 0x1394 <KEYPAD_getPressedKey>
    2c48:	8d 33       	cpi	r24, 0x3D	; 61
    2c4a:	e1 f7       	brne	.-8      	; 0x2c44 <Enter_pass+0x24a>

	uint8 receiveByte;

	/* waiting for a ready signal from the control unit */

	receiveByte = UART_recieveByte();
    2c4c:	0e 94 3f 18 	call	0x307e	; 0x307e <UART_recieveByte>
    2c50:	89 af       	std	Y+57, r24	; 0x39

	/*	send entered password to the other mc by UART	*/
	UART_sendString(password);
    2c52:	80 e2       	ldi	r24, 0x20	; 32
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	0e 94 4e 18 	call	0x309c	; 0x309c <UART_sendString>

	/* waiting for a ready signal from the control unit */
	LCD_clearScreen();
    2c5a:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	a6 e9       	ldi	r26, 0x96	; 150
    2c64:	b3 e4       	ldi	r27, 0x43	; 67
    2c66:	89 8f       	std	Y+25, r24	; 0x19
    2c68:	9a 8f       	std	Y+26, r25	; 0x1a
    2c6a:	ab 8f       	std	Y+27, r26	; 0x1b
    2c6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	4a ef       	ldi	r20, 0xFA	; 250
    2c7c:	54 e4       	ldi	r21, 0x44	; 68
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	8d 8b       	std	Y+21, r24	; 0x15
    2c88:	9e 8b       	std	Y+22, r25	; 0x16
    2c8a:	af 8b       	std	Y+23, r26	; 0x17
    2c8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c90:	7e 89       	ldd	r23, Y+22	; 0x16
    2c92:	8f 89       	ldd	r24, Y+23	; 0x17
    2c94:	98 8d       	ldd	r25, Y+24	; 0x18
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca2:	88 23       	and	r24, r24
    2ca4:	2c f4       	brge	.+10     	; 0x2cb0 <Enter_pass+0x2b6>
		__ticks = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9c 8b       	std	Y+20, r25	; 0x14
    2cac:	8b 8b       	std	Y+19, r24	; 0x13
    2cae:	3f c0       	rjmp	.+126    	; 0x2d2e <Enter_pass+0x334>
	else if (__tmp > 65535)
    2cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	3f ef       	ldi	r19, 0xFF	; 255
    2cbc:	4f e7       	ldi	r20, 0x7F	; 127
    2cbe:	57 e4       	ldi	r21, 0x47	; 71
    2cc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc4:	18 16       	cp	r1, r24
    2cc6:	4c f5       	brge	.+82     	; 0x2d1a <Enter_pass+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc8:	69 8d       	ldd	r22, Y+25	; 0x19
    2cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e2       	ldi	r20, 0x20	; 32
    2cd6:	51 e4       	ldi	r21, 0x41	; 65
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9c 8b       	std	Y+20, r25	; 0x14
    2cee:	8b 8b       	std	Y+19, r24	; 0x13
    2cf0:	0f c0       	rjmp	.+30     	; 0x2d10 <Enter_pass+0x316>
    2cf2:	88 ec       	ldi	r24, 0xC8	; 200
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	9a 8b       	std	Y+18, r25	; 0x12
    2cf8:	89 8b       	std	Y+17, r24	; 0x11
    2cfa:	89 89       	ldd	r24, Y+17	; 0x11
    2cfc:	9a 89       	ldd	r25, Y+18	; 0x12
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <Enter_pass+0x304>
    2d02:	9a 8b       	std	Y+18, r25	; 0x12
    2d04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d06:	8b 89       	ldd	r24, Y+19	; 0x13
    2d08:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	9c 8b       	std	Y+20, r25	; 0x14
    2d0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d10:	8b 89       	ldd	r24, Y+19	; 0x13
    2d12:	9c 89       	ldd	r25, Y+20	; 0x14
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	69 f7       	brne	.-38     	; 0x2cf2 <Enter_pass+0x2f8>
    2d18:	14 c0       	rjmp	.+40     	; 0x2d42 <Enter_pass+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d20:	98 8d       	ldd	r25, Y+24	; 0x18
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9c 8b       	std	Y+20, r25	; 0x14
    2d2c:	8b 8b       	std	Y+19, r24	; 0x13
    2d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d30:	9c 89       	ldd	r25, Y+20	; 0x14
    2d32:	98 8b       	std	Y+16, r25	; 0x10
    2d34:	8f 87       	std	Y+15, r24	; 0x0f
    2d36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d38:	98 89       	ldd	r25, Y+16	; 0x10
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <Enter_pass+0x340>
    2d3e:	98 8b       	std	Y+16, r25	; 0x10
    2d40:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);

	/* Send MC2_READY byte to MC1 to ask it to send the string */
	UART_sendByte(HMI_MC1_READY_UART);
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	0e 94 28 18 	call	0x3050	; 0x3050 <UART_sendByte>

	matching = UART_recieveByte();
    2d48:	0e 94 3f 18 	call	0x307e	; 0x307e <UART_recieveByte>
    2d4c:	80 93 1e 01 	sts	0x011E, r24
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	aa ef       	ldi	r26, 0xFA	; 250
    2d56:	b3 e4       	ldi	r27, 0x43	; 67
    2d58:	8b 87       	std	Y+11, r24	; 0x0b
    2d5a:	9c 87       	std	Y+12, r25	; 0x0c
    2d5c:	ad 87       	std	Y+13, r26	; 0x0d
    2d5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	4a ef       	ldi	r20, 0xFA	; 250
    2d6e:	54 e4       	ldi	r21, 0x44	; 68
    2d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	8f 83       	std	Y+7, r24	; 0x07
    2d7a:	98 87       	std	Y+8, r25	; 0x08
    2d7c:	a9 87       	std	Y+9, r26	; 0x09
    2d7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d80:	6f 81       	ldd	r22, Y+7	; 0x07
    2d82:	78 85       	ldd	r23, Y+8	; 0x08
    2d84:	89 85       	ldd	r24, Y+9	; 0x09
    2d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	40 e8       	ldi	r20, 0x80	; 128
    2d8e:	5f e3       	ldi	r21, 0x3F	; 63
    2d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d94:	88 23       	and	r24, r24
    2d96:	2c f4       	brge	.+10     	; 0x2da2 <Enter_pass+0x3a8>
		__ticks = 1;
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	9e 83       	std	Y+6, r25	; 0x06
    2d9e:	8d 83       	std	Y+5, r24	; 0x05
    2da0:	3f c0       	rjmp	.+126    	; 0x2e20 <Enter_pass+0x426>
	else if (__tmp > 65535)
    2da2:	6f 81       	ldd	r22, Y+7	; 0x07
    2da4:	78 85       	ldd	r23, Y+8	; 0x08
    2da6:	89 85       	ldd	r24, Y+9	; 0x09
    2da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	3f ef       	ldi	r19, 0xFF	; 255
    2dae:	4f e7       	ldi	r20, 0x7F	; 127
    2db0:	57 e4       	ldi	r21, 0x47	; 71
    2db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db6:	18 16       	cp	r1, r24
    2db8:	4c f5       	brge	.+82     	; 0x2e0c <Enter_pass+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e2       	ldi	r20, 0x20	; 32
    2dc8:	51 e4       	ldi	r21, 0x41	; 65
    2dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	bc 01       	movw	r22, r24
    2dd4:	cd 01       	movw	r24, r26
    2dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	9e 83       	std	Y+6, r25	; 0x06
    2de0:	8d 83       	std	Y+5, r24	; 0x05
    2de2:	0f c0       	rjmp	.+30     	; 0x2e02 <Enter_pass+0x408>
    2de4:	88 ec       	ldi	r24, 0xC8	; 200
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9c 83       	std	Y+4, r25	; 0x04
    2dea:	8b 83       	std	Y+3, r24	; 0x03
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	9c 81       	ldd	r25, Y+4	; 0x04
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <Enter_pass+0x3f6>
    2df4:	9c 83       	std	Y+4, r25	; 0x04
    2df6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	9e 83       	std	Y+6, r25	; 0x06
    2e00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e02:	8d 81       	ldd	r24, Y+5	; 0x05
    2e04:	9e 81       	ldd	r25, Y+6	; 0x06
    2e06:	00 97       	sbiw	r24, 0x00	; 0
    2e08:	69 f7       	brne	.-38     	; 0x2de4 <Enter_pass+0x3ea>
    2e0a:	14 c0       	rjmp	.+40     	; 0x2e34 <Enter_pass+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0e:	78 85       	ldd	r23, Y+8	; 0x08
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	9e 83       	std	Y+6, r25	; 0x06
    2e1e:	8d 83       	std	Y+5, r24	; 0x05
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	9e 81       	ldd	r25, Y+6	; 0x06
    2e24:	9a 83       	std	Y+2, r25	; 0x02
    2e26:	89 83       	std	Y+1, r24	; 0x01
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	f1 f7       	brne	.-4      	; 0x2e2c <Enter_pass+0x432>
    2e30:	9a 83       	std	Y+2, r25	; 0x02
    2e32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

	/*	if two passwords don't match*/

	if (matching == 0) {
    2e34:	80 91 1e 01 	lds	r24, 0x011E
    2e38:	88 23       	and	r24, r24
    2e3a:	21 f5       	brne	.+72     	; 0x2e84 <Enter_pass+0x48a>
		error_pass++;
    2e3c:	80 91 1f 01 	lds	r24, 0x011F
    2e40:	8f 5f       	subi	r24, 0xFF	; 255
    2e42:	80 93 1f 01 	sts	0x011F, r24
		if (error_pass == 3) {
    2e46:	80 91 1f 01 	lds	r24, 0x011F
    2e4a:	83 30       	cpi	r24, 0x03	; 3
    2e4c:	c9 f4       	brne	.+50     	; 0x2e80 <Enter_pass+0x486>
			/*Buzzer*/
			Timer1_init(&g_timer1_config);
    2e4e:	8e e0       	ldi	r24, 0x0E	; 14
    2e50:	91 e0       	ldi	r25, 0x01	; 1
    2e52:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer1_init>
			Timer1_setCallBack(&Timer_CallBackFunction);
    2e56:	80 e8       	ldi	r24, 0x80	; 128
    2e58:	90 e1       	ldi	r25, 0x10	; 16
    2e5a:	0e 94 14 06 	call	0xc28	; 0xc28 <Timer1_setCallBack>
			LCD_clearScreen();
    2e5e:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
			LCD_displayString("Error in pass");
    2e62:	82 ed       	ldi	r24, 0xD2	; 210
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
			g_ticks = 0;
    2e6a:	10 92 30 01 	sts	0x0130, r1
			while (g_ticks < 60)
    2e6e:	80 91 30 01 	lds	r24, 0x0130
    2e72:	8c 33       	cpi	r24, 0x3C	; 60
    2e74:	e0 f3       	brcs	.-8      	; 0x2e6e <Enter_pass+0x474>
				;
			/*Buzzer work in other mc*/
			error_pass = 0;
    2e76:	10 92 1f 01 	sts	0x011F, r1
			return 2;
    2e7a:	82 e0       	ldi	r24, 0x02	; 2
    2e7c:	8a af       	std	Y+58, r24	; 0x3a
    2e7e:	06 c0       	rjmp	.+12     	; 0x2e8c <Enter_pass+0x492>

		}
		return 0;
    2e80:	1a ae       	std	Y+58, r1	; 0x3a
    2e82:	04 c0       	rjmp	.+8      	; 0x2e8c <Enter_pass+0x492>

	} else {
		error_pass = 0;
    2e84:	10 92 1f 01 	sts	0x011F, r1
		return 1;
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	8a af       	std	Y+58, r24	; 0x3a
    2e8c:	8a ad       	ldd	r24, Y+58	; 0x3a
	}
}
    2e8e:	ea 96       	adiw	r28, 0x3a	; 58
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	cf 91       	pop	r28
    2e9c:	df 91       	pop	r29
    2e9e:	08 95       	ret

00002ea0 <Door>:


/*To show the status of door on LCD"OPENING-OPENED-CLOSING"*/

void Door() {
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&g_timer1_config);
    2ea8:	8e e0       	ldi	r24, 0x0E	; 14
    2eaa:	91 e0       	ldi	r25, 0x01	; 1
    2eac:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer1_init>
	Timer1_setCallBack(&Timer_CallBackFunction);
    2eb0:	80 e8       	ldi	r24, 0x80	; 128
    2eb2:	90 e1       	ldi	r25, 0x10	; 16
    2eb4:	0e 94 14 06 	call	0xc28	; 0xc28 <Timer1_setCallBack>
	g_ticks = 0;
    2eb8:	10 92 30 01 	sts	0x0130, r1
	LCD_clearScreen();
    2ebc:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
	LCD_displayString("Door Opening");
    2ec0:	80 ee       	ldi	r24, 0xE0	; 224
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
	while (g_ticks < 15)
    2ec8:	80 91 30 01 	lds	r24, 0x0130
    2ecc:	8f 30       	cpi	r24, 0x0F	; 15
    2ece:	e0 f3       	brcs	.-8      	; 0x2ec8 <Door+0x28>
		;

	g_ticks = 0;
    2ed0:	10 92 30 01 	sts	0x0130, r1
	LCD_clearScreen();
    2ed4:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
	LCD_displayString("Opened Door");
    2ed8:	8d ee       	ldi	r24, 0xED	; 237
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
	while (g_ticks < 3)
    2ee0:	80 91 30 01 	lds	r24, 0x0130
    2ee4:	83 30       	cpi	r24, 0x03	; 3
    2ee6:	e0 f3       	brcs	.-8      	; 0x2ee0 <Door+0x40>
		;

	g_ticks = 0;
    2ee8:	10 92 30 01 	sts	0x0130, r1
	LCD_clearScreen();
    2eec:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_clearScreen>
	LCD_displayString("Door Closing");
    2ef0:	89 ef       	ldi	r24, 0xF9	; 249
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_displayString>
	while (g_ticks < 15)
    2ef8:	80 91 30 01 	lds	r24, 0x0130
    2efc:	8f 30       	cpi	r24, 0x0F	; 15
    2efe:	e0 f3       	brcs	.-8      	; 0x2ef8 <Door+0x58>
		;

	Timer1_deInit();
    2f00:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Timer1_deInit>

}
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_configType * configPtr)
{
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	00 d0       	rcall	.+0      	; 0x2f10 <UART_init+0x6>
    2f10:	00 d0       	rcall	.+0      	; 0x2f12 <UART_init+0x8>
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	9c 83       	std	Y+4, r25	; 0x04
    2f18:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2f1a:	1a 82       	std	Y+2, r1	; 0x02
    2f1c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2f1e:	eb e2       	ldi	r30, 0x2B	; 43
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	82 e0       	ldi	r24, 0x02	; 2
    2f24:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2f26:	ea e2       	ldi	r30, 0x2A	; 42
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	88 e1       	ldi	r24, 0x18	; 24
    2f2c:	80 83       	st	Z, r24
	 * UPM1:0  = parity bit
	 * USBS    = stop bit number
	 * UCSZ1:0 = data bits mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= ((configPtr->parityConfig) << UPM0);
    2f2e:	a0 e4       	ldi	r26, 0x40	; 64
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	e0 e4       	ldi	r30, 0x40	; 64
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	28 2f       	mov	r18, r24
    2f3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f3e:	84 81       	ldd	r24, Z+4	; 0x04
    2f40:	88 2f       	mov	r24, r24
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	82 95       	swap	r24
    2f46:	92 95       	swap	r25
    2f48:	90 7f       	andi	r25, 0xF0	; 240
    2f4a:	98 27       	eor	r25, r24
    2f4c:	80 7f       	andi	r24, 0xF0	; 240
    2f4e:	98 27       	eor	r25, r24
    2f50:	82 2b       	or	r24, r18
    2f52:	8c 93       	st	X, r24
	UCSRC |= ((configPtr->stopBitConfig) << USBS);
    2f54:	a0 e4       	ldi	r26, 0x40	; 64
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	e0 e4       	ldi	r30, 0x40	; 64
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	28 2f       	mov	r18, r24
    2f60:	eb 81       	ldd	r30, Y+3	; 0x03
    2f62:	fc 81       	ldd	r31, Y+4	; 0x04
    2f64:	85 81       	ldd	r24, Z+5	; 0x05
    2f66:	88 2f       	mov	r24, r24
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	88 0f       	add	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	88 0f       	add	r24, r24
    2f70:	99 1f       	adc	r25, r25
    2f72:	88 0f       	add	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	82 2b       	or	r24, r18
    2f78:	8c 93       	st	X, r24

	CLEAR_BIT(UCSRC,UCSZ0);
    2f7a:	a0 e4       	ldi	r26, 0x40	; 64
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	e0 e4       	ldi	r30, 0x40	; 64
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	8d 7f       	andi	r24, 0xFD	; 253
    2f86:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ1);
    2f88:	a0 e4       	ldi	r26, 0x40	; 64
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e0 e4       	ldi	r30, 0x40	; 64
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	8b 7f       	andi	r24, 0xFB	; 251
    2f94:	8c 93       	st	X, r24
	if (configPtr->dataType != Data_9_Bits){
    2f96:	eb 81       	ldd	r30, Y+3	; 0x03
    2f98:	fc 81       	ldd	r31, Y+4	; 0x04
    2f9a:	86 81       	ldd	r24, Z+6	; 0x06
    2f9c:	87 30       	cpi	r24, 0x07	; 7
    2f9e:	81 f0       	breq	.+32     	; 0x2fc0 <UART_init+0xb6>
		UCSRC |= ((configPtr->dataType) << UCSZ0);
    2fa0:	a0 e4       	ldi	r26, 0x40	; 64
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e0 e4       	ldi	r30, 0x40	; 64
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	28 2f       	mov	r18, r24
    2fac:	eb 81       	ldd	r30, Y+3	; 0x03
    2fae:	fc 81       	ldd	r31, Y+4	; 0x04
    2fb0:	86 81       	ldd	r24, Z+6	; 0x06
    2fb2:	88 2f       	mov	r24, r24
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	88 0f       	add	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	82 2b       	or	r24, r18
    2fbc:	8c 93       	st	X, r24
    2fbe:	15 c0       	rjmp	.+42     	; 0x2fea <UART_init+0xe0>
	}else{
		SET_BIT(UCSRC,UCSZ0);
    2fc0:	a0 e4       	ldi	r26, 0x40	; 64
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	e0 e4       	ldi	r30, 0x40	; 64
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	82 60       	ori	r24, 0x02	; 2
    2fcc:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2fce:	a0 e4       	ldi	r26, 0x40	; 64
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	e0 e4       	ldi	r30, 0x40	; 64
    2fd4:	f0 e0       	ldi	r31, 0x00	; 0
    2fd6:	80 81       	ld	r24, Z
    2fd8:	84 60       	ori	r24, 0x04	; 4
    2fda:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    2fdc:	aa e2       	ldi	r26, 0x2A	; 42
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	ea e2       	ldi	r30, 0x2A	; 42
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	84 60       	ori	r24, 0x04	; 4
    2fe8:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((configPtr->baud_rate) * 8UL))) - 1);
    2fea:	eb 81       	ldd	r30, Y+3	; 0x03
    2fec:	fc 81       	ldd	r31, Y+4	; 0x04
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	a2 81       	ldd	r26, Z+2	; 0x02
    2ff4:	b3 81       	ldd	r27, Z+3	; 0x03
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	aa 1f       	adc	r26, r26
    2ffc:	bb 1f       	adc	r27, r27
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	aa 1f       	adc	r26, r26
    3004:	bb 1f       	adc	r27, r27
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	aa 1f       	adc	r26, r26
    300c:	bb 1f       	adc	r27, r27
    300e:	9c 01       	movw	r18, r24
    3010:	ad 01       	movw	r20, r26
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	92 e1       	ldi	r25, 0x12	; 18
    3016:	aa e7       	ldi	r26, 0x7A	; 122
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 ba 18 	call	0x3174	; 0x3174 <__udivmodsi4>
    3022:	da 01       	movw	r26, r20
    3024:	c9 01       	movw	r24, r18
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    302c:	e0 e4       	ldi	r30, 0x40	; 64
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	9a 81       	ldd	r25, Y+2	; 0x02
    3034:	89 2f       	mov	r24, r25
    3036:	99 27       	eor	r25, r25
    3038:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    303a:	e9 e2       	ldi	r30, 0x29	; 41
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	80 83       	st	Z, r24
}
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	0f 92       	push	r0
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    305c:	eb e2       	ldi	r30, 0x2B	; 43
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	88 2f       	mov	r24, r24
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	80 72       	andi	r24, 0x20	; 32
    3068:	90 70       	andi	r25, 0x00	; 0
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	b9 f3       	breq	.-18     	; 0x305c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    306e:	ec e2       	ldi	r30, 0x2C	; 44
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3076:	0f 90       	pop	r0
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3086:	eb e2       	ldi	r30, 0x2B	; 43
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	80 81       	ld	r24, Z
    308c:	88 23       	and	r24, r24
    308e:	dc f7       	brge	.-10     	; 0x3086 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    3090:	ec e2       	ldi	r30, 0x2C	; 44
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
}
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    309c:	df 93       	push	r29
    309e:	cf 93       	push	r28
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <UART_sendString+0x6>
    30a2:	0f 92       	push	r0
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
    30a8:	9b 83       	std	Y+3, r25	; 0x03
    30aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30ac:	19 82       	std	Y+1, r1	; 0x01
    30ae:	0e c0       	rjmp	.+28     	; 0x30cc <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	8a 81       	ldd	r24, Y+2	; 0x02
    30b8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ba:	fc 01       	movw	r30, r24
    30bc:	e2 0f       	add	r30, r18
    30be:	f3 1f       	adc	r31, r19
    30c0:	80 81       	ld	r24, Z
    30c2:	0e 94 28 18 	call	0x3050	; 0x3050 <UART_sendByte>
		i++;
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	8f 5f       	subi	r24, 0xFF	; 255
    30ca:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	28 2f       	mov	r18, r24
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	8a 81       	ldd	r24, Y+2	; 0x02
    30d4:	9b 81       	ldd	r25, Y+3	; 0x03
    30d6:	fc 01       	movw	r30, r24
    30d8:	e2 0f       	add	r30, r18
    30da:	f3 1f       	adc	r31, r19
    30dc:	80 81       	ld	r24, Z
    30de:	88 23       	and	r24, r24
    30e0:	39 f7       	brne	.-50     	; 0x30b0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	cf 91       	pop	r28
    30ea:	df 91       	pop	r29
    30ec:	08 95       	ret

000030ee <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    30ee:	0f 93       	push	r16
    30f0:	1f 93       	push	r17
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	00 d0       	rcall	.+0      	; 0x30f8 <UART_receiveString+0xa>
    30f8:	0f 92       	push	r0
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	9b 83       	std	Y+3, r25	; 0x03
    3100:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3102:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	9b 81       	ldd	r25, Y+3	; 0x03
    310e:	8c 01       	movw	r16, r24
    3110:	02 0f       	add	r16, r18
    3112:	13 1f       	adc	r17, r19
    3114:	0e 94 3f 18 	call	0x307e	; 0x307e <UART_recieveByte>
    3118:	f8 01       	movw	r30, r16
    311a:	80 83       	st	Z, r24
    311c:	0f c0       	rjmp	.+30     	; 0x313c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	8f 5f       	subi	r24, 0xFF	; 255
    3122:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	28 2f       	mov	r18, r24
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	9b 81       	ldd	r25, Y+3	; 0x03
    312e:	8c 01       	movw	r16, r24
    3130:	02 0f       	add	r16, r18
    3132:	13 1f       	adc	r17, r19
    3134:	0e 94 3f 18 	call	0x307e	; 0x307e <UART_recieveByte>
    3138:	f8 01       	movw	r30, r16
    313a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	28 2f       	mov	r18, r24
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	8a 81       	ldd	r24, Y+2	; 0x02
    3144:	9b 81       	ldd	r25, Y+3	; 0x03
    3146:	fc 01       	movw	r30, r24
    3148:	e2 0f       	add	r30, r18
    314a:	f3 1f       	adc	r31, r19
    314c:	80 81       	ld	r24, Z
    314e:	83 32       	cpi	r24, 0x23	; 35
    3150:	31 f7       	brne	.-52     	; 0x311e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3152:	89 81       	ldd	r24, Y+1	; 0x01
    3154:	28 2f       	mov	r18, r24
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	9b 81       	ldd	r25, Y+3	; 0x03
    315c:	fc 01       	movw	r30, r24
    315e:	e2 0f       	add	r30, r18
    3160:	f3 1f       	adc	r31, r19
    3162:	10 82       	st	Z, r1
}
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	cf 91       	pop	r28
    316c:	df 91       	pop	r29
    316e:	1f 91       	pop	r17
    3170:	0f 91       	pop	r16
    3172:	08 95       	ret

00003174 <__udivmodsi4>:
    3174:	a1 e2       	ldi	r26, 0x21	; 33
    3176:	1a 2e       	mov	r1, r26
    3178:	aa 1b       	sub	r26, r26
    317a:	bb 1b       	sub	r27, r27
    317c:	fd 01       	movw	r30, r26
    317e:	0d c0       	rjmp	.+26     	; 0x319a <__udivmodsi4_ep>

00003180 <__udivmodsi4_loop>:
    3180:	aa 1f       	adc	r26, r26
    3182:	bb 1f       	adc	r27, r27
    3184:	ee 1f       	adc	r30, r30
    3186:	ff 1f       	adc	r31, r31
    3188:	a2 17       	cp	r26, r18
    318a:	b3 07       	cpc	r27, r19
    318c:	e4 07       	cpc	r30, r20
    318e:	f5 07       	cpc	r31, r21
    3190:	20 f0       	brcs	.+8      	; 0x319a <__udivmodsi4_ep>
    3192:	a2 1b       	sub	r26, r18
    3194:	b3 0b       	sbc	r27, r19
    3196:	e4 0b       	sbc	r30, r20
    3198:	f5 0b       	sbc	r31, r21

0000319a <__udivmodsi4_ep>:
    319a:	66 1f       	adc	r22, r22
    319c:	77 1f       	adc	r23, r23
    319e:	88 1f       	adc	r24, r24
    31a0:	99 1f       	adc	r25, r25
    31a2:	1a 94       	dec	r1
    31a4:	69 f7       	brne	.-38     	; 0x3180 <__udivmodsi4_loop>
    31a6:	60 95       	com	r22
    31a8:	70 95       	com	r23
    31aa:	80 95       	com	r24
    31ac:	90 95       	com	r25
    31ae:	9b 01       	movw	r18, r22
    31b0:	ac 01       	movw	r20, r24
    31b2:	bd 01       	movw	r22, r26
    31b4:	cf 01       	movw	r24, r30
    31b6:	08 95       	ret

000031b8 <__prologue_saves__>:
    31b8:	2f 92       	push	r2
    31ba:	3f 92       	push	r3
    31bc:	4f 92       	push	r4
    31be:	5f 92       	push	r5
    31c0:	6f 92       	push	r6
    31c2:	7f 92       	push	r7
    31c4:	8f 92       	push	r8
    31c6:	9f 92       	push	r9
    31c8:	af 92       	push	r10
    31ca:	bf 92       	push	r11
    31cc:	cf 92       	push	r12
    31ce:	df 92       	push	r13
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	ca 1b       	sub	r28, r26
    31e2:	db 0b       	sbc	r29, r27
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
    31ee:	09 94       	ijmp

000031f0 <__epilogue_restores__>:
    31f0:	2a 88       	ldd	r2, Y+18	; 0x12
    31f2:	39 88       	ldd	r3, Y+17	; 0x11
    31f4:	48 88       	ldd	r4, Y+16	; 0x10
    31f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    31f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    31fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    31fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    31fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3200:	aa 84       	ldd	r10, Y+10	; 0x0a
    3202:	b9 84       	ldd	r11, Y+9	; 0x09
    3204:	c8 84       	ldd	r12, Y+8	; 0x08
    3206:	df 80       	ldd	r13, Y+7	; 0x07
    3208:	ee 80       	ldd	r14, Y+6	; 0x06
    320a:	fd 80       	ldd	r15, Y+5	; 0x05
    320c:	0c 81       	ldd	r16, Y+4	; 0x04
    320e:	1b 81       	ldd	r17, Y+3	; 0x03
    3210:	aa 81       	ldd	r26, Y+2	; 0x02
    3212:	b9 81       	ldd	r27, Y+1	; 0x01
    3214:	ce 0f       	add	r28, r30
    3216:	d1 1d       	adc	r29, r1
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	ed 01       	movw	r28, r26
    3224:	08 95       	ret

00003226 <itoa>:
    3226:	fb 01       	movw	r30, r22
    3228:	9f 01       	movw	r18, r30
    322a:	e8 94       	clt
    322c:	42 30       	cpi	r20, 0x02	; 2
    322e:	c4 f0       	brlt	.+48     	; 0x3260 <itoa+0x3a>
    3230:	45 32       	cpi	r20, 0x25	; 37
    3232:	b4 f4       	brge	.+44     	; 0x3260 <itoa+0x3a>
    3234:	4a 30       	cpi	r20, 0x0A	; 10
    3236:	29 f4       	brne	.+10     	; 0x3242 <itoa+0x1c>
    3238:	97 fb       	bst	r25, 7
    323a:	1e f4       	brtc	.+6      	; 0x3242 <itoa+0x1c>
    323c:	90 95       	com	r25
    323e:	81 95       	neg	r24
    3240:	9f 4f       	sbci	r25, 0xFF	; 255
    3242:	64 2f       	mov	r22, r20
    3244:	77 27       	eor	r23, r23
    3246:	0e 94 44 19 	call	0x3288	; 0x3288 <__udivmodhi4>
    324a:	80 5d       	subi	r24, 0xD0	; 208
    324c:	8a 33       	cpi	r24, 0x3A	; 58
    324e:	0c f0       	brlt	.+2      	; 0x3252 <itoa+0x2c>
    3250:	89 5d       	subi	r24, 0xD9	; 217
    3252:	81 93       	st	Z+, r24
    3254:	cb 01       	movw	r24, r22
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	a1 f7       	brne	.-24     	; 0x3242 <itoa+0x1c>
    325a:	16 f4       	brtc	.+4      	; 0x3260 <itoa+0x3a>
    325c:	5d e2       	ldi	r21, 0x2D	; 45
    325e:	51 93       	st	Z+, r21
    3260:	10 82       	st	Z, r1
    3262:	c9 01       	movw	r24, r18
    3264:	0c 94 34 19 	jmp	0x3268	; 0x3268 <strrev>

00003268 <strrev>:
    3268:	dc 01       	movw	r26, r24
    326a:	fc 01       	movw	r30, r24
    326c:	67 2f       	mov	r22, r23
    326e:	71 91       	ld	r23, Z+
    3270:	77 23       	and	r23, r23
    3272:	e1 f7       	brne	.-8      	; 0x326c <strrev+0x4>
    3274:	32 97       	sbiw	r30, 0x02	; 2
    3276:	04 c0       	rjmp	.+8      	; 0x3280 <strrev+0x18>
    3278:	7c 91       	ld	r23, X
    327a:	6d 93       	st	X+, r22
    327c:	70 83       	st	Z, r23
    327e:	62 91       	ld	r22, -Z
    3280:	ae 17       	cp	r26, r30
    3282:	bf 07       	cpc	r27, r31
    3284:	c8 f3       	brcs	.-14     	; 0x3278 <strrev+0x10>
    3286:	08 95       	ret

00003288 <__udivmodhi4>:
    3288:	aa 1b       	sub	r26, r26
    328a:	bb 1b       	sub	r27, r27
    328c:	51 e1       	ldi	r21, 0x11	; 17
    328e:	07 c0       	rjmp	.+14     	; 0x329e <__udivmodhi4_ep>

00003290 <__udivmodhi4_loop>:
    3290:	aa 1f       	adc	r26, r26
    3292:	bb 1f       	adc	r27, r27
    3294:	a6 17       	cp	r26, r22
    3296:	b7 07       	cpc	r27, r23
    3298:	10 f0       	brcs	.+4      	; 0x329e <__udivmodhi4_ep>
    329a:	a6 1b       	sub	r26, r22
    329c:	b7 0b       	sbc	r27, r23

0000329e <__udivmodhi4_ep>:
    329e:	88 1f       	adc	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	5a 95       	dec	r21
    32a4:	a9 f7       	brne	.-22     	; 0x3290 <__udivmodhi4_loop>
    32a6:	80 95       	com	r24
    32a8:	90 95       	com	r25
    32aa:	bc 01       	movw	r22, r24
    32ac:	cd 01       	movw	r24, r26
    32ae:	08 95       	ret

000032b0 <_exit>:
    32b0:	f8 94       	cli

000032b2 <__stop_program>:
    32b2:	ff cf       	rjmp	.-2      	; 0x32b2 <__stop_program>
